// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: struct.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// inner room TickReq
type InnerTickReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowMs    int64  `protobuf:"varint,1,opt,name=nowMs,proto3" json:"nowMs,omitempty"`                         // 当前时间戳
	RoomId   uint64 `protobuf:"varint,2,opt,name=roomId,proto3" json:"roomId,omitempty"`                       // 房间id
	SrcBusId uint32 `protobuf:"varint,3,opt,name=src_bus_id,json=srcBusId,proto3" json:"src_bus_id,omitempty"` // 发送者bus id
}

func (x *InnerTickReq) Reset() {
	*x = InnerTickReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerTickReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerTickReq) ProtoMessage() {}

func (x *InnerTickReq) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerTickReq.ProtoReflect.Descriptor instead.
func (*InnerTickReq) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{0}
}

func (x *InnerTickReq) GetNowMs() int64 {
	if x != nil {
		return x.NowMs
	}
	return 0
}

func (x *InnerTickReq) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *InnerTickReq) GetSrcBusId() uint32 {
	if x != nil {
		return x.SrcBusId
	}
	return 0
}

// 底池结构
type PotTexasGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PotType uint32   `protobuf:"varint,1,opt,name=pot_type,json=potType,proto3" json:"pot_type,omitempty"`        // 底池类型：0-主池，1-边池
	Chips   int64    `protobuf:"varint,2,opt,name=chips,proto3" json:"chips,omitempty"`                           // 总筹码
	UidList []uint64 `protobuf:"varint,3,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"` // 玩家id
}

func (x *PotTexasGameData) Reset() {
	*x = PotTexasGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotTexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotTexasGameData) ProtoMessage() {}

func (x *PotTexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotTexasGameData.ProtoReflect.Descriptor instead.
func (*PotTexasGameData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{1}
}

func (x *PotTexasGameData) GetPotType() uint32 {
	if x != nil {
		return x.PotType
	}
	return 0
}

func (x *PotTexasGameData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *PotTexasGameData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

type PotPoolTexasGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBetChips int64               `protobuf:"varint,1,opt,name=total_bet_chips,json=totalBetChips,proto3" json:"total_bet_chips,omitempty"` // 下注总筹码
	BetChips      int64               `protobuf:"varint,2,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                  // 下注筹码
	PotList       []*PotTexasGameData `protobuf:"bytes,3,rep,name=pot_list,json=potList,proto3" json:"pot_list,omitempty"`                      // 底池
}

func (x *PotPoolTexasGameData) Reset() {
	*x = PotPoolTexasGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PotPoolTexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PotPoolTexasGameData) ProtoMessage() {}

func (x *PotPoolTexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PotPoolTexasGameData.ProtoReflect.Descriptor instead.
func (*PotPoolTexasGameData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{2}
}

func (x *PotPoolTexasGameData) GetTotalBetChips() int64 {
	if x != nil {
		return x.TotalBetChips
	}
	return 0
}

func (x *PotPoolTexasGameData) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *PotPoolTexasGameData) GetPotList() []*PotTexasGameData {
	if x != nil {
		return x.PotList
	}
	return nil
}

// 玩家个人texas游戏数据结构
type PlayerTexasGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         uint64      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                                                                 // 玩家id
	ChairId     uint32      `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                                          // 座位号
	Chips       int64       `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                                             // 玩家筹码
	IsChange    bool        `protobuf:"varint,4,opt,name=is_change,json=isChange,proto3" json:"is_change,omitempty"`                                       // 是否变更
	Position    uint32      `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`                                                       // 玩家位置
	PlayerState uint32      `protobuf:"varint,6,opt,name=player_state,json=playerState,proto3" json:"player_state,omitempty"`                              // 加入房间、加入牌桌、退出牌桌、结算完成
	GameState   GameState   `protobuf:"varint,7,opt,name=game_state,json=gameState,proto3,enum=g1.protocol.GameState" json:"game_state,omitempty"`         // 游戏状态
	OperateType OperateType `protobuf:"varint,8,opt,name=operate_type,json=operateType,proto3,enum=g1.protocol.OperateType" json:"operate_type,omitempty"` // 玩家操作
	BetChips    int64       `protobuf:"varint,9,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                                       // 玩家下注
	PreOpr      OperateType `protobuf:"varint,10,opt,name=pre_opr,json=preOpr,proto3,enum=g1.protocol.OperateType" json:"pre_opr,omitempty"`               // 是否预操作
	PreBetChips int64       `protobuf:"varint,11,opt,name=pre_bet_chips,json=preBetChips,proto3" json:"pre_bet_chips,omitempty"`                           // 预下注筹码
}

func (x *PlayerTexasGameData) Reset() {
	*x = PlayerTexasGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTexasGameData) ProtoMessage() {}

func (x *PlayerTexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTexasGameData.ProtoReflect.Descriptor instead.
func (*PlayerTexasGameData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerTexasGameData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerTexasGameData) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *PlayerTexasGameData) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *PlayerTexasGameData) GetIsChange() bool {
	if x != nil {
		return x.IsChange
	}
	return false
}

func (x *PlayerTexasGameData) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PlayerTexasGameData) GetPlayerState() uint32 {
	if x != nil {
		return x.PlayerState
	}
	return 0
}

func (x *PlayerTexasGameData) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_STATE_INIT
}

func (x *PlayerTexasGameData) GetOperateType() OperateType {
	if x != nil {
		return x.OperateType
	}
	return OperateType_OPERATE_NONE
}

func (x *PlayerTexasGameData) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *PlayerTexasGameData) GetPreOpr() OperateType {
	if x != nil {
		return x.PreOpr
	}
	return OperateType_OPERATE_NONE
}

func (x *PlayerTexasGameData) GetPreBetChips() int64 {
	if x != nil {
		return x.PreBetChips
	}
	return 0
}

// 游戏结构
type TexasGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameState      GameState             `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=g1.protocol.GameState" json:"game_state,omitempty"` // 游戏状态
	DealerChairId  uint32                `protobuf:"varint,2,opt,name=dealer_chair_id,json=dealerChairId,proto3" json:"dealer_chair_id,omitempty"`              // 庄家座位号
	SmallChairId   uint32                `protobuf:"varint,4,opt,name=small_chair_id,json=smallChairId,proto3" json:"small_chair_id,omitempty"`                 // 小盲座位号
	BigChairId     uint32                `protobuf:"varint,5,opt,name=big_chair_id,json=bigChairId,proto3" json:"big_chair_id,omitempty"`                       // 大盲座位号
	BigBlind       int64                 `protobuf:"varint,6,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`                               // 大盲注
	MinRaise       int64                 `protobuf:"varint,7,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`                               // 最小加注
	MaxBetChips    int64                 `protobuf:"varint,8,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"`                    // 最大下注筹码
	PublicCardList []uint32              `protobuf:"varint,9,rep,packed,name=public_card_list,json=publicCardList,proto3" json:"public_card_list,omitempty"`    // 展示公共牌
	Cursor         uint32                `protobuf:"varint,10,opt,name=cursor,proto3" json:"cursor,omitempty"`                                                  // 当前操作玩家
	UidList        []uint64              `protobuf:"varint,11,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`                          // 玩家数据
	Pots           *PotPoolTexasGameData `protobuf:"bytes,12,opt,name=pots,proto3" json:"pots,omitempty"`                                                       // 底池
	IsCompare      bool                  `protobuf:"varint,13,opt,name=is_compare,json=isCompare,proto3" json:"is_compare,omitempty"`                           // 是否出发比牌
}

func (x *TexasGameData) Reset() {
	*x = TexasGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameData) ProtoMessage() {}

func (x *TexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameData.ProtoReflect.Descriptor instead.
func (*TexasGameData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{4}
}

func (x *TexasGameData) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_STATE_INIT
}

func (x *TexasGameData) GetDealerChairId() uint32 {
	if x != nil {
		return x.DealerChairId
	}
	return 0
}

func (x *TexasGameData) GetSmallChairId() uint32 {
	if x != nil {
		return x.SmallChairId
	}
	return 0
}

func (x *TexasGameData) GetBigChairId() uint32 {
	if x != nil {
		return x.BigChairId
	}
	return 0
}

func (x *TexasGameData) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasGameData) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *TexasGameData) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *TexasGameData) GetPublicCardList() []uint32 {
	if x != nil {
		return x.PublicCardList
	}
	return nil
}

func (x *TexasGameData) GetCursor() uint32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *TexasGameData) GetUidList() []uint64 {
	if x != nil {
		return x.UidList
	}
	return nil
}

func (x *TexasGameData) GetPots() *PotPoolTexasGameData {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *TexasGameData) GetIsCompare() bool {
	if x != nil {
		return x.IsCompare
	}
	return false
}

// 牌堆数据
type TexasGamePrivateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor  uint32                              `protobuf:"varint,1,opt,name=cursor,proto3" json:"cursor,omitempty"`                                                                                           // 牌堆游标位置
	Cards   []uint32                            `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`                                                                                      // 牌堆
	Players map[uint64]*PlayerTexasGameCardData `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 玩家手牌
}

func (x *TexasGamePrivateData) Reset() {
	*x = TexasGamePrivateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGamePrivateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePrivateData) ProtoMessage() {}

func (x *TexasGamePrivateData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePrivateData.ProtoReflect.Descriptor instead.
func (*TexasGamePrivateData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{5}
}

func (x *TexasGamePrivateData) GetCursor() uint32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *TexasGamePrivateData) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *TexasGamePrivateData) GetPlayers() map[uint64]*PlayerTexasGameCardData {
	if x != nil {
		return x.Players
	}
	return nil
}

type PlayerTexasGameCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BestType      CardType `protobuf:"varint,2,opt,name=best_type,json=bestType,proto3,enum=g1.protocol.CardType" json:"best_type,omitempty"` // 玩家最大牌型
	BestCardValue uint32   `protobuf:"varint,3,opt,name=best_card_value,json=bestCardValue,proto3" json:"best_card_value,omitempty"`
	BestCardList  []uint32 `protobuf:"varint,4,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"` // 玩家最大牌
	HandCardList  []uint32 `protobuf:"varint,5,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"` // 玩家手牌
	HandShowList  []bool   `protobuf:"varint,6,rep,packed,name=hand_show_list,json=handShowList,proto3" json:"hand_show_list,omitempty"` // 是否展示
}

func (x *PlayerTexasGameCardData) Reset() {
	*x = PlayerTexasGameCardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTexasGameCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTexasGameCardData) ProtoMessage() {}

func (x *PlayerTexasGameCardData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTexasGameCardData.ProtoReflect.Descriptor instead.
func (*PlayerTexasGameCardData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{6}
}

func (x *PlayerTexasGameCardData) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerTexasGameCardData) GetBestType() CardType {
	if x != nil {
		return x.BestType
	}
	return CardType_CARD_TYPE_NONE
}

func (x *PlayerTexasGameCardData) GetBestCardValue() uint32 {
	if x != nil {
		return x.BestCardValue
	}
	return 0
}

func (x *PlayerTexasGameCardData) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

func (x *PlayerTexasGameCardData) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *PlayerTexasGameCardData) GetHandShowList() []bool {
	if x != nil {
		return x.HandShowList
	}
	return nil
}

// 游戏牌桌数据结构
type TableTexasGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomState   RoomState                       `protobuf:"varint,1,opt,name=room_state,json=roomState,proto3,enum=g1.protocol.RoomState" json:"room_state,omitempty"`
	Round       uint32                          `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                                                                                                   // 当前游戏轮数
	Players     map[uint64]*PlayerTexasGameData `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                       // 玩家数据
	ChairInfo   map[uint32]uint64               `protobuf:"bytes,4,rep,name=chair_info,json=chairInfo,proto3" json:"chair_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 玩家座位号和uid的映射关系
	GameData    *TexasGameData                  `protobuf:"bytes,5,opt,name=game_data,json=gameData,proto3" json:"game_data,omitempty"`                                                                                              // 游戏数据
	PrivateData *TexasGamePrivateData           `protobuf:"bytes,6,opt,name=private_data,json=privateData,proto3" json:"private_data,omitempty"`                                                                                     // 牌堆数据
}

func (x *TableTexasGameData) Reset() {
	*x = TableTexasGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableTexasGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableTexasGameData) ProtoMessage() {}

func (x *TableTexasGameData) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableTexasGameData.ProtoReflect.Descriptor instead.
func (*TableTexasGameData) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{7}
}

func (x *TableTexasGameData) GetRoomState() RoomState {
	if x != nil {
		return x.RoomState
	}
	return RoomState_WAITSTART
}

func (x *TableTexasGameData) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TableTexasGameData) GetPlayers() map[uint64]*PlayerTexasGameData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *TableTexasGameData) GetChairInfo() map[uint32]uint64 {
	if x != nil {
		return x.ChairInfo
	}
	return nil
}

func (x *TableTexasGameData) GetGameData() *TexasGameData {
	if x != nil {
		return x.GameData
	}
	return nil
}

func (x *TableTexasGameData) GetPrivateData() *TexasGamePrivateData {
	if x != nil {
		return x.PrivateData
	}
	return nil
}

//	-------------- 游戏事件通知结构 --------------
//
// NOTIFY_EVENT_BET,NOTIFY_EVENT_CALL,NOTIFY_EVENT_RAISE,NOTIFY_EVENT_CHECK,NOTIFY_EVENT_BET_ANTE
// NOTIFY_EVENT_BET_BIG_BLIND,NOTIFY_EVENT_BET_SMALL_BLIND,NOTIFY_EVENT_BET_SMALL_BLIND
type NotifyGameEventBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      uint64                `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                             // 房间id
	ChairId     uint32                `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                                          // 下注玩家
	Chips       int64                 `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                                             // 玩家手里筹码
	NextChairId uint32                `protobuf:"varint,4,opt,name=next_chair_id,json=nextChairId,proto3" json:"next_chair_id,omitempty"`                            // 下一个下注玩家
	OperateType OperateType           `protobuf:"varint,5,opt,name=operate_type,json=operateType,proto3,enum=g1.protocol.OperateType" json:"operate_type,omitempty"` // 玩家操作类型
	BetChips    int64                 `protobuf:"varint,6,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                                       // 玩家下注金额,看牌&弃牌为0
	Pots        *PotPoolTexasGameData `protobuf:"bytes,7,opt,name=Pots,proto3" json:"Pots,omitempty"`                                                                // 筹码池
	MinRaise    int64                 `protobuf:"varint,8,opt,name=min_raise,json=minRaise,proto3" json:"min_raise,omitempty"`                                       // 最小加注
	MaxBetChips int64                 `protobuf:"varint,9,opt,name=max_bet_chips,json=maxBetChips,proto3" json:"max_bet_chips,omitempty"`                            // 最大下注筹码
	Duration    int64                 `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`                                                      // 时间戳
}

func (x *NotifyGameEventBet) Reset() {
	*x = NotifyGameEventBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEventBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEventBet) ProtoMessage() {}

func (x *NotifyGameEventBet) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEventBet.ProtoReflect.Descriptor instead.
func (*NotifyGameEventBet) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{8}
}

func (x *NotifyGameEventBet) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEventBet) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *NotifyGameEventBet) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *NotifyGameEventBet) GetNextChairId() uint32 {
	if x != nil {
		return x.NextChairId
	}
	return 0
}

func (x *NotifyGameEventBet) GetOperateType() OperateType {
	if x != nil {
		return x.OperateType
	}
	return OperateType_OPERATE_NONE
}

func (x *NotifyGameEventBet) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

func (x *NotifyGameEventBet) GetPots() *PotPoolTexasGameData {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *NotifyGameEventBet) GetMinRaise() int64 {
	if x != nil {
		return x.MinRaise
	}
	return 0
}

func (x *NotifyGameEventBet) GetMaxBetChips() int64 {
	if x != nil {
		return x.MaxBetChips
	}
	return 0
}

func (x *NotifyGameEventBet) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// NOTIFY_EVENT_DEAL,NOTIFY_FLOP_CARD
type NotifyGameEventDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        uint64                `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                     // 房间id
	GameState     GameState             `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3,enum=g1.protocol.GameState" json:"game_state,omitempty"` // 游戏状态
	HandsCard     []uint32              `protobuf:"varint,3,rep,packed,name=hands_card,json=handsCard,proto3" json:"hands_card,omitempty"`                     // 手牌 or 公共牌
	CurBetChairId uint32                `protobuf:"varint,4,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"`            // 当前下注玩家座位
	Pots          *PotPoolTexasGameData `protobuf:"bytes,5,opt,name=Pots,proto3" json:"Pots,omitempty"`                                                        // 筹码池
	Duration      int64                 `protobuf:"varint,6,opt,name=duration,proto3" json:"duration,omitempty"`                                               // 时间戳
}

func (x *NotifyGameEventDeal) Reset() {
	*x = NotifyGameEventDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEventDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEventDeal) ProtoMessage() {}

func (x *NotifyGameEventDeal) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEventDeal.ProtoReflect.Descriptor instead.
func (*NotifyGameEventDeal) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{9}
}

func (x *NotifyGameEventDeal) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEventDeal) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_STATE_INIT
}

func (x *NotifyGameEventDeal) GetHandsCard() []uint32 {
	if x != nil {
		return x.HandsCard
	}
	return nil
}

func (x *NotifyGameEventDeal) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *NotifyGameEventDeal) GetPots() *PotPoolTexasGameData {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *NotifyGameEventDeal) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// EVENT_BET_PRE_FOLP,EVENT_BET_FOLP,EVENT_BET_TURN,EVENT_BET_RIVER
type NotifyGameEventFolpBet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        uint64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                     // 房间id
	GameState     GameState `protobuf:"varint,2,opt,name=game_state,json=gameState,proto3,enum=g1.protocol.GameState" json:"game_state,omitempty"` // 游戏状态
	CurBetChairId uint32    `protobuf:"varint,3,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"`            // 当前下注玩家座位
}

func (x *NotifyGameEventFolpBet) Reset() {
	*x = NotifyGameEventFolpBet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEventFolpBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEventFolpBet) ProtoMessage() {}

func (x *NotifyGameEventFolpBet) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEventFolpBet.ProtoReflect.Descriptor instead.
func (*NotifyGameEventFolpBet) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{10}
}

func (x *NotifyGameEventFolpBet) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEventFolpBet) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_STATE_INIT
}

func (x *NotifyGameEventFolpBet) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

// NOTIFY_EVENT_SIT_DOWN,NOTIFY_EVENT_STAND_UP,NOTIFY_EVENT_LEAVE,NOTIFY_EVENT_READY,NOTIFY_EVENT_CANCEL_READY,NOTIFY_EVENT_FOLD
type NotifyGameEventRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId  uint64               `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`    // 房间id
	ChairId uint32               `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"` // 下注玩家
	Role    *PbIconDesc          `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`                       // 玩家头像信息
	Player  *PlayerTexasGameData `protobuf:"bytes,4,opt,name=player,proto3" json:"player,omitempty"`                   // 玩家数据
}

func (x *NotifyGameEventRole) Reset() {
	*x = NotifyGameEventRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEventRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEventRole) ProtoMessage() {}

func (x *NotifyGameEventRole) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEventRole.ProtoReflect.Descriptor instead.
func (*NotifyGameEventRole) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{11}
}

func (x *NotifyGameEventRole) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEventRole) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *NotifyGameEventRole) GetRole() *PbIconDesc {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *NotifyGameEventRole) GetPlayer() *PlayerTexasGameData {
	if x != nil {
		return x.Player
	}
	return nil
}

// NOTIFY_EVENT_GAME_START,NOTIFY_EVENT_GAME_END,NOTIFY_EVENT_GAME_PAUSE,NOTIFY_EVENT_GAME_RESUME,NOTIFY_EVENT_GAME_RESET
type NotifyGameEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId        uint64                `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                          // 房间id
	Round         uint32                `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`                                          // 当前回合
	DealerChair   uint32                `protobuf:"varint,3,opt,name=dealer_chair,json=dealerChair,proto3" json:"dealer_chair,omitempty"`           // 庄家座位号
	SmallChair    uint32                `protobuf:"varint,4,opt,name=small_chair,json=smallChair,proto3" json:"small_chair,omitempty"`              // 小盲座位号
	BigChair      uint32                `protobuf:"varint,5,opt,name=big_chair,json=bigChair,proto3" json:"big_chair,omitempty"`                    // 大盲座位号
	SmallChip     uint32                `protobuf:"varint,6,opt,name=small_chip,json=smallChip,proto3" json:"small_chip,omitempty"`                 // 小盲位筹码
	BigChip       uint32                `protobuf:"varint,7,opt,name=big_chip,json=bigChip,proto3" json:"big_chip,omitempty"`                       // 大盲位筹码
	CurBetChairId uint32                `protobuf:"varint,8,opt,name=cur_bet_chair_id,json=curBetChairId,proto3" json:"cur_bet_chair_id,omitempty"` // 当前下注玩家座位
	Pots          *PotPoolTexasGameData `protobuf:"bytes,9,opt,name=Pots,proto3" json:"Pots,omitempty"`                                             // 筹码池
	EndInfo       []*TexasGameEndInfo   `protobuf:"bytes,10,rep,name=end_info,json=endInfo,proto3" json:"end_info,omitempty"`
	Duration      int64                 `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"` // 时间戳
}

func (x *NotifyGameEvent) Reset() {
	*x = NotifyGameEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEvent) ProtoMessage() {}

func (x *NotifyGameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEvent.ProtoReflect.Descriptor instead.
func (*NotifyGameEvent) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{12}
}

func (x *NotifyGameEvent) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEvent) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *NotifyGameEvent) GetDealerChair() uint32 {
	if x != nil {
		return x.DealerChair
	}
	return 0
}

func (x *NotifyGameEvent) GetSmallChair() uint32 {
	if x != nil {
		return x.SmallChair
	}
	return 0
}

func (x *NotifyGameEvent) GetBigChair() uint32 {
	if x != nil {
		return x.BigChair
	}
	return 0
}

func (x *NotifyGameEvent) GetSmallChip() uint32 {
	if x != nil {
		return x.SmallChip
	}
	return 0
}

func (x *NotifyGameEvent) GetBigChip() uint32 {
	if x != nil {
		return x.BigChip
	}
	return 0
}

func (x *NotifyGameEvent) GetCurBetChairId() uint32 {
	if x != nil {
		return x.CurBetChairId
	}
	return 0
}

func (x *NotifyGameEvent) GetPots() *PotPoolTexasGameData {
	if x != nil {
		return x.Pots
	}
	return nil
}

func (x *NotifyGameEvent) GetEndInfo() []*TexasGameEndInfo {
	if x != nil {
		return x.EndInfo
	}
	return nil
}

func (x *NotifyGameEvent) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type TexasGameEndInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid      uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId  uint32   `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`
	Chips    int64    `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`
	WinChips int64    `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`
	CardType CardType `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=g1.protocol.CardType" json:"card_type,omitempty"` // 牌型
	Hands    []uint32 `protobuf:"varint,6,rep,packed,name=hands,proto3" json:"hands,omitempty"`
	Bests    []uint32 `protobuf:"varint,7,rep,packed,name=bests,proto3" json:"bests,omitempty"` // 最大牌型
}

func (x *TexasGameEndInfo) Reset() {
	*x = TexasGameEndInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGameEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameEndInfo) ProtoMessage() {}

func (x *TexasGameEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameEndInfo.ProtoReflect.Descriptor instead.
func (*TexasGameEndInfo) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{13}
}

func (x *TexasGameEndInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameEndInfo) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGameEndInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGameEndInfo) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGameEndInfo) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_CARD_TYPE_NONE
}

func (x *TexasGameEndInfo) GetHands() []uint32 {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *TexasGameEndInfo) GetBests() []uint32 {
	if x != nil {
		return x.Bests
	}
	return nil
}

// NOTIFY_EVENT_BLIND
type NotifyGameEventBlind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId uint64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"` // 房间id
	Small  uint64 `protobuf:"varint,2,opt,name=small,proto3" json:"small,omitempty"`                 // 小盲
	Big    uint64 `protobuf:"varint,3,opt,name=big,proto3" json:"big,omitempty"`                     // 大盲
}

func (x *NotifyGameEventBlind) Reset() {
	*x = NotifyGameEventBlind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_struct_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyGameEventBlind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyGameEventBlind) ProtoMessage() {}

func (x *NotifyGameEventBlind) ProtoReflect() protoreflect.Message {
	mi := &file_struct_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyGameEventBlind.ProtoReflect.Descriptor instead.
func (*NotifyGameEventBlind) Descriptor() ([]byte, []int) {
	return file_struct_proto_rawDescGZIP(), []int{14}
}

func (x *NotifyGameEventBlind) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *NotifyGameEventBlind) GetSmall() uint64 {
	if x != nil {
		return x.Small
	}
	return 0
}

func (x *NotifyGameEventBlind) GetBig() uint64 {
	if x != nil {
		return x.Big
	}
	return 0
}

var File_struct_proto protoreflect.FileDescriptor

var file_struct_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0a, 0x72, 0x6f, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0c, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x77, 0x4d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x77, 0x4d, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x62, 0x75,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x42,
	0x75, 0x73, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x10, 0x50, 0x6f, 0x74, 0x54, 0x65, 0x78, 0x61, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74,
	0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x74, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x03, 0x0a,
	0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43,
	0x68, 0x69, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x4f, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x5f, 0x62,
	0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x0d,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x69, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69,
	0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x70, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x70, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x60, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x93, 0x04, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x4d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x37, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x5c,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e,
	0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf0, 0x02, 0x0a, 0x12, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x65,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x50, 0x6f, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x78,
	0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x50, 0x6f, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x69, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x02,
	0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x04, 0x50, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x50, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x91, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x70, 0x42, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x5f, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x49,
	0x63, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x91, 0x03, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x43, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x62, 0x69, 0x67, 0x43, 0x68, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x67, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x69,
	0x67, 0x43, 0x68, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x5f, 0x62, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x42, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x04, 0x50, 0x6f, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x50, 0x6f, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x10,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x32, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x57, 0x0a, 0x14, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x62, 0x69, 0x67, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_struct_proto_rawDescOnce sync.Once
	file_struct_proto_rawDescData = file_struct_proto_rawDesc
)

func file_struct_proto_rawDescGZIP() []byte {
	file_struct_proto_rawDescOnce.Do(func() {
		file_struct_proto_rawDescData = protoimpl.X.CompressGZIP(file_struct_proto_rawDescData)
	})
	return file_struct_proto_rawDescData
}

var file_struct_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_struct_proto_goTypes = []interface{}{
	(*InnerTickReq)(nil),            // 0: g1.protocol.InnerTickReq
	(*PotTexasGameData)(nil),        // 1: g1.protocol.PotTexasGameData
	(*PotPoolTexasGameData)(nil),    // 2: g1.protocol.PotPoolTexasGameData
	(*PlayerTexasGameData)(nil),     // 3: g1.protocol.PlayerTexasGameData
	(*TexasGameData)(nil),           // 4: g1.protocol.TexasGameData
	(*TexasGamePrivateData)(nil),    // 5: g1.protocol.TexasGamePrivateData
	(*PlayerTexasGameCardData)(nil), // 6: g1.protocol.PlayerTexasGameCardData
	(*TableTexasGameData)(nil),      // 7: g1.protocol.TableTexasGameData
	(*NotifyGameEventBet)(nil),      // 8: g1.protocol.NotifyGameEventBet
	(*NotifyGameEventDeal)(nil),     // 9: g1.protocol.NotifyGameEventDeal
	(*NotifyGameEventFolpBet)(nil),  // 10: g1.protocol.NotifyGameEventFolpBet
	(*NotifyGameEventRole)(nil),     // 11: g1.protocol.NotifyGameEventRole
	(*NotifyGameEvent)(nil),         // 12: g1.protocol.NotifyGameEvent
	(*TexasGameEndInfo)(nil),        // 13: g1.protocol.TexasGameEndInfo
	(*NotifyGameEventBlind)(nil),    // 14: g1.protocol.NotifyGameEventBlind
	nil,                             // 15: g1.protocol.TexasGamePrivateData.PlayersEntry
	nil,                             // 16: g1.protocol.TableTexasGameData.PlayersEntry
	nil,                             // 17: g1.protocol.TableTexasGameData.ChairInfoEntry
	(GameState)(0),                  // 18: g1.protocol.GameState
	(OperateType)(0),                // 19: g1.protocol.OperateType
	(CardType)(0),                   // 20: g1.protocol.CardType
	(RoomState)(0),                  // 21: g1.protocol.RoomState
	(*PbIconDesc)(nil),              // 22: g1.protocol.PbIconDesc
}
var file_struct_proto_depIdxs = []int32{
	1,  // 0: g1.protocol.PotPoolTexasGameData.pot_list:type_name -> g1.protocol.PotTexasGameData
	18, // 1: g1.protocol.PlayerTexasGameData.game_state:type_name -> g1.protocol.GameState
	19, // 2: g1.protocol.PlayerTexasGameData.operate_type:type_name -> g1.protocol.OperateType
	19, // 3: g1.protocol.PlayerTexasGameData.pre_opr:type_name -> g1.protocol.OperateType
	18, // 4: g1.protocol.TexasGameData.game_state:type_name -> g1.protocol.GameState
	2,  // 5: g1.protocol.TexasGameData.pots:type_name -> g1.protocol.PotPoolTexasGameData
	15, // 6: g1.protocol.TexasGamePrivateData.players:type_name -> g1.protocol.TexasGamePrivateData.PlayersEntry
	20, // 7: g1.protocol.PlayerTexasGameCardData.best_type:type_name -> g1.protocol.CardType
	21, // 8: g1.protocol.TableTexasGameData.room_state:type_name -> g1.protocol.RoomState
	16, // 9: g1.protocol.TableTexasGameData.players:type_name -> g1.protocol.TableTexasGameData.PlayersEntry
	17, // 10: g1.protocol.TableTexasGameData.chair_info:type_name -> g1.protocol.TableTexasGameData.ChairInfoEntry
	4,  // 11: g1.protocol.TableTexasGameData.game_data:type_name -> g1.protocol.TexasGameData
	5,  // 12: g1.protocol.TableTexasGameData.private_data:type_name -> g1.protocol.TexasGamePrivateData
	19, // 13: g1.protocol.NotifyGameEventBet.operate_type:type_name -> g1.protocol.OperateType
	2,  // 14: g1.protocol.NotifyGameEventBet.Pots:type_name -> g1.protocol.PotPoolTexasGameData
	18, // 15: g1.protocol.NotifyGameEventDeal.game_state:type_name -> g1.protocol.GameState
	2,  // 16: g1.protocol.NotifyGameEventDeal.Pots:type_name -> g1.protocol.PotPoolTexasGameData
	18, // 17: g1.protocol.NotifyGameEventFolpBet.game_state:type_name -> g1.protocol.GameState
	22, // 18: g1.protocol.NotifyGameEventRole.role:type_name -> g1.protocol.PbIconDesc
	3,  // 19: g1.protocol.NotifyGameEventRole.player:type_name -> g1.protocol.PlayerTexasGameData
	2,  // 20: g1.protocol.NotifyGameEvent.Pots:type_name -> g1.protocol.PotPoolTexasGameData
	13, // 21: g1.protocol.NotifyGameEvent.end_info:type_name -> g1.protocol.TexasGameEndInfo
	20, // 22: g1.protocol.TexasGameEndInfo.card_type:type_name -> g1.protocol.CardType
	6,  // 23: g1.protocol.TexasGamePrivateData.PlayersEntry.value:type_name -> g1.protocol.PlayerTexasGameCardData
	3,  // 24: g1.protocol.TableTexasGameData.PlayersEntry.value:type_name -> g1.protocol.PlayerTexasGameData
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_struct_proto_init() }
func file_struct_proto_init() {
	if File_struct_proto != nil {
		return
	}
	file_role_proto_init()
	file_game_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_struct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerTickReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotTexasGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PotPoolTexasGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTexasGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGamePrivateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTexasGameCardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableTexasGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEventBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEventDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEventFolpBet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEventRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGameEndInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_struct_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyGameEventBlind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_struct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_struct_proto_goTypes,
		DependencyIndexes: file_struct_proto_depIdxs,
		MessageInfos:      file_struct_proto_msgTypes,
	}.Build()
	File_struct_proto = out.File
	file_struct_proto_rawDesc = nil
	file_struct_proto_goTypes = nil
	file_struct_proto_depIdxs = nil
}
