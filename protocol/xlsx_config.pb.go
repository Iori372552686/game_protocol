//
// 本代码由xlsx工具生成，请勿手动修改

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: xlsx_config.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DropItemConfing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DropItemId  int32  `protobuf:"varint,1,opt,name=DropItemId,proto3" json:"DropItemId,omitempty"`   // 掉落物品Id
	DropId      int32  `protobuf:"varint,2,opt,name=DropId,proto3" json:"DropId,omitempty"`           // 掉落Id
	ItemId      int32  `protobuf:"varint,3,opt,name=ItemId,proto3" json:"ItemId,omitempty"`           // 物品Id
	ItemName    string `protobuf:"bytes,4,opt,name=ItemName,proto3" json:"ItemName,omitempty"`        // 物品名
	Count       int64  `protobuf:"varint,5,opt,name=Count,proto3" json:"Count,omitempty"`             // 数量
	DropWay     int32  `protobuf:"varint,6,opt,name=DropWay,proto3" json:"DropWay,omitempty"`         // 掉落方式
	Probability int32  `protobuf:"varint,7,opt,name=Probability,proto3" json:"Probability,omitempty"` // 掉落概率
	IsRare      int32  `protobuf:"varint,8,opt,name=IsRare,proto3" json:"IsRare,omitempty"`           // 是否罕见
	IsShow      int32  `protobuf:"varint,9,opt,name=IsShow,proto3" json:"IsShow,omitempty"`           // 是否展示
}

func (x *DropItemConfing) Reset() {
	*x = DropItemConfing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropItemConfing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropItemConfing) ProtoMessage() {}

func (x *DropItemConfing) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropItemConfing.ProtoReflect.Descriptor instead.
func (*DropItemConfing) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{0}
}

func (x *DropItemConfing) GetDropItemId() int32 {
	if x != nil {
		return x.DropItemId
	}
	return 0
}

func (x *DropItemConfing) GetDropId() int32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *DropItemConfing) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *DropItemConfing) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *DropItemConfing) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DropItemConfing) GetDropWay() int32 {
	if x != nil {
		return x.DropWay
	}
	return 0
}

func (x *DropItemConfing) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *DropItemConfing) GetIsRare() int32 {
	if x != nil {
		return x.IsRare
	}
	return 0
}

func (x *DropItemConfing) GetIsShow() int32 {
	if x != nil {
		return x.IsShow
	}
	return 0
}

type DropItemConfingAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*DropItemConfing `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *DropItemConfingAry) Reset() {
	*x = DropItemConfingAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropItemConfingAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropItemConfingAry) ProtoMessage() {}

func (x *DropItemConfingAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropItemConfingAry.ProtoReflect.Descriptor instead.
func (*DropItemConfingAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{1}
}

func (x *DropItemConfingAry) GetAry() []*DropItemConfing {
	if x != nil {
		return x.Ary
	}
	return nil
}

type ItemConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId        int32  `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`               // 物品Id
	Name          string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                    // 物品名
	Type          int32  `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`                   // 大类
	MainType      int32  `protobuf:"varint,4,opt,name=MainType,proto3" json:"MainType,omitempty"`           // 主类型
	SubType       int32  `protobuf:"varint,5,opt,name=SubType,proto3" json:"SubType,omitempty"`             // 子类型
	Description   string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`      // 描述
	Quality       int32  `protobuf:"varint,7,opt,name=Quality,proto3" json:"Quality,omitempty"`             // 品质
	Icon          string `protobuf:"bytes,8,opt,name=Icon,proto3" json:"Icon,omitempty"`                    // 图标
	BagType       int32  `protobuf:"varint,9,opt,name=BagType,proto3" json:"BagType,omitempty"`             // 背包页签
	NeedLevel     int32  `protobuf:"varint,10,opt,name=NeedLevel,proto3" json:"NeedLevel,omitempty"`        // 所需等级
	GetWayDes     string `protobuf:"bytes,11,opt,name=GetWayDes,proto3" json:"GetWayDes,omitempty"`         // 获取途径_描述
	GetWayJump    string `protobuf:"bytes,12,opt,name=GetWayJump,proto3" json:"GetWayJump,omitempty"`       // 获取途径_跳转
	EffectiveTime string `protobuf:"bytes,13,opt,name=EffectiveTime,proto3" json:"EffectiveTime,omitempty"` // 生效时间
	InvalidTime   string `protobuf:"bytes,14,opt,name=InvalidTime,proto3" json:"InvalidTime,omitempty"`     // 失效时间
	Combine       int32  `protobuf:"varint,15,opt,name=Combine,proto3" json:"Combine,omitempty"`            // 是否合成
	Sale          int32  `protobuf:"varint,16,opt,name=Sale,proto3" json:"Sale,omitempty"`                  // 出售
}

func (x *ItemConfig) Reset() {
	*x = ItemConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConfig) ProtoMessage() {}

func (x *ItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConfig.ProtoReflect.Descriptor instead.
func (*ItemConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{2}
}

func (x *ItemConfig) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ItemConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ItemConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ItemConfig) GetMainType() int32 {
	if x != nil {
		return x.MainType
	}
	return 0
}

func (x *ItemConfig) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *ItemConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ItemConfig) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *ItemConfig) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *ItemConfig) GetBagType() int32 {
	if x != nil {
		return x.BagType
	}
	return 0
}

func (x *ItemConfig) GetNeedLevel() int32 {
	if x != nil {
		return x.NeedLevel
	}
	return 0
}

func (x *ItemConfig) GetGetWayDes() string {
	if x != nil {
		return x.GetWayDes
	}
	return ""
}

func (x *ItemConfig) GetGetWayJump() string {
	if x != nil {
		return x.GetWayJump
	}
	return ""
}

func (x *ItemConfig) GetEffectiveTime() string {
	if x != nil {
		return x.EffectiveTime
	}
	return ""
}

func (x *ItemConfig) GetInvalidTime() string {
	if x != nil {
		return x.InvalidTime
	}
	return ""
}

func (x *ItemConfig) GetCombine() int32 {
	if x != nil {
		return x.Combine
	}
	return 0
}

func (x *ItemConfig) GetSale() int32 {
	if x != nil {
		return x.Sale
	}
	return 0
}

type ItemConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*ItemConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *ItemConfigAry) Reset() {
	*x = ItemConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemConfigAry) ProtoMessage() {}

func (x *ItemConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemConfigAry.ProtoReflect.Descriptor instead.
func (*ItemConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{3}
}

func (x *ItemConfigAry) GetAry() []*ItemConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type MachineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId          int32 `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`                   // 游戏id
	StartDuration   int64 `protobuf:"varint,2,opt,name=StartDuration,proto3" json:"StartDuration,omitempty"`     // 开始时长(秒)
	PreFlopDuration int64 `protobuf:"varint,3,opt,name=PreFlopDuration,proto3" json:"PreFlopDuration,omitempty"` // 翻牌前时长
	FlopDuration    int64 `protobuf:"varint,4,opt,name=FlopDuration,proto3" json:"FlopDuration,omitempty"`       // 翻牌下注轮时长
	TurnDuration    int64 `protobuf:"varint,5,opt,name=TurnDuration,proto3" json:"TurnDuration,omitempty"`       // 转牌下注轮时长
	RiverDuration   int64 `protobuf:"varint,6,opt,name=RiverDuration,proto3" json:"RiverDuration,omitempty"`     // 河牌下注轮时长
	EndDuration     int64 `protobuf:"varint,7,opt,name=EndDuration,proto3" json:"EndDuration,omitempty"`         // 结算时长
	DefaultDuration int64 `protobuf:"varint,8,opt,name=DefaultDuration,proto3" json:"DefaultDuration,omitempty"` // 默认时长
}

func (x *MachineConfig) Reset() {
	*x = MachineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfig) ProtoMessage() {}

func (x *MachineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfig.ProtoReflect.Descriptor instead.
func (*MachineConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{4}
}

func (x *MachineConfig) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MachineConfig) GetStartDuration() int64 {
	if x != nil {
		return x.StartDuration
	}
	return 0
}

func (x *MachineConfig) GetPreFlopDuration() int64 {
	if x != nil {
		return x.PreFlopDuration
	}
	return 0
}

func (x *MachineConfig) GetFlopDuration() int64 {
	if x != nil {
		return x.FlopDuration
	}
	return 0
}

func (x *MachineConfig) GetTurnDuration() int64 {
	if x != nil {
		return x.TurnDuration
	}
	return 0
}

func (x *MachineConfig) GetRiverDuration() int64 {
	if x != nil {
		return x.RiverDuration
	}
	return 0
}

func (x *MachineConfig) GetEndDuration() int64 {
	if x != nil {
		return x.EndDuration
	}
	return 0
}

func (x *MachineConfig) GetDefaultDuration() int64 {
	if x != nil {
		return x.DefaultDuration
	}
	return 0
}

type MachineConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*MachineConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *MachineConfigAry) Reset() {
	*x = MachineConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfigAry) ProtoMessage() {}

func (x *MachineConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfigAry.ProtoReflect.Descriptor instead.
func (*MachineConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{5}
}

func (x *MachineConfigAry) GetAry() []*MachineConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type MallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                        // id
	Type          int32  `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`                    // 商品类型
	Name          string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                     // 礼包名称
	PackageID     int32  `protobuf:"varint,4,opt,name=PackageID,proto3" json:"PackageID,omitempty"`          // 礼包ID
	CostItemID    int32  `protobuf:"varint,5,opt,name=CostItemID,proto3" json:"CostItemID,omitempty"`        // 购买货币ID
	CostItemCnt   int32  `protobuf:"varint,6,opt,name=CostItemCnt,proto3" json:"CostItemCnt,omitempty"`      // 购买货币数量
	BeginTime     string `protobuf:"bytes,7,opt,name=BeginTime,proto3" json:"BeginTime,omitempty"`           // 限时开始时间
	EndTime       string `protobuf:"bytes,8,opt,name=EndTime,proto3" json:"EndTime,omitempty"`               // 限时结束时间
	BuyLimit      int32  `protobuf:"varint,9,opt,name=BuyLimit,proto3" json:"BuyLimit,omitempty"`            // 限购次数
	DailyBuyLimit int32  `protobuf:"varint,10,opt,name=DailyBuyLimit,proto3" json:"DailyBuyLimit,omitempty"` // 每日限购次数
	Lable         int32  `protobuf:"varint,11,opt,name=Lable,proto3" json:"Lable,omitempty"`                 // 标签
	Rmb           int32  `protobuf:"varint,12,opt,name=Rmb,proto3" json:"Rmb,omitempty"`                     // 对应充值表ID
}

func (x *MallConfig) Reset() {
	*x = MallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConfig) ProtoMessage() {}

func (x *MallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConfig.ProtoReflect.Descriptor instead.
func (*MallConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{6}
}

func (x *MallConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MallConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MallConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MallConfig) GetPackageID() int32 {
	if x != nil {
		return x.PackageID
	}
	return 0
}

func (x *MallConfig) GetCostItemID() int32 {
	if x != nil {
		return x.CostItemID
	}
	return 0
}

func (x *MallConfig) GetCostItemCnt() int32 {
	if x != nil {
		return x.CostItemCnt
	}
	return 0
}

func (x *MallConfig) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *MallConfig) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *MallConfig) GetBuyLimit() int32 {
	if x != nil {
		return x.BuyLimit
	}
	return 0
}

func (x *MallConfig) GetDailyBuyLimit() int32 {
	if x != nil {
		return x.DailyBuyLimit
	}
	return 0
}

func (x *MallConfig) GetLable() int32 {
	if x != nil {
		return x.Lable
	}
	return 0
}

func (x *MallConfig) GetRmb() int32 {
	if x != nil {
		return x.Rmb
	}
	return 0
}

type MallConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*MallConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *MallConfigAry) Reset() {
	*x = MallConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MallConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MallConfigAry) ProtoMessage() {}

func (x *MallConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MallConfigAry.ProtoReflect.Descriptor instead.
func (*MallConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{7}
}

func (x *MallConfigAry) GetAry() []*MallConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type RechargeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`                            // id
	Name             string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`                         // 礼包名称
	AndroidProductID string `protobuf:"bytes,3,opt,name=AndroidProductID,proto3" json:"AndroidProductID,omitempty"` // Android平台商品ID
	IosProductID     string `protobuf:"bytes,4,opt,name=IosProductID,proto3" json:"IosProductID,omitempty"`         // IOS平台商品ID
	ProductID        int32  `protobuf:"varint,5,opt,name=ProductID,proto3" json:"ProductID,omitempty"`              // 获得道具ID
	ProductCnt       int32  `protobuf:"varint,6,opt,name=ProductCnt,proto3" json:"ProductCnt,omitempty"`            // 获得道具数量
	IsFirstDouble    int32  `protobuf:"varint,7,opt,name=IsFirstDouble,proto3" json:"IsFirstDouble,omitempty"`      // 首冲是否双倍
	Icon             string `protobuf:"bytes,8,opt,name=Icon,proto3" json:"Icon,omitempty"`                         // 图标
	Limit            int32  `protobuf:"varint,9,opt,name=Limit,proto3" json:"Limit,omitempty"`                      // 限制
}

func (x *RechargeConfig) Reset() {
	*x = RechargeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeConfig) ProtoMessage() {}

func (x *RechargeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeConfig.ProtoReflect.Descriptor instead.
func (*RechargeConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{8}
}

func (x *RechargeConfig) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RechargeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RechargeConfig) GetAndroidProductID() string {
	if x != nil {
		return x.AndroidProductID
	}
	return ""
}

func (x *RechargeConfig) GetIosProductID() string {
	if x != nil {
		return x.IosProductID
	}
	return ""
}

func (x *RechargeConfig) GetProductID() int32 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *RechargeConfig) GetProductCnt() int32 {
	if x != nil {
		return x.ProductCnt
	}
	return 0
}

func (x *RechargeConfig) GetIsFirstDouble() int32 {
	if x != nil {
		return x.IsFirstDouble
	}
	return 0
}

func (x *RechargeConfig) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *RechargeConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type RechargeConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*RechargeConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *RechargeConfigAry) Reset() {
	*x = RechargeConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeConfigAry) ProtoMessage() {}

func (x *RechargeConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeConfigAry.ProtoReflect.Descriptor instead.
func (*RechargeConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{9}
}

func (x *RechargeConfigAry) GetAry() []*RechargeConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint32    `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`                               // 唯一ID
	TaskType  TaskType  `protobuf:"varint,2,opt,name=TaskType,proto3,enum=g1.protocol.TaskType" json:"TaskType,omitempty"` // 任务类型
	TaskTitle string    `protobuf:"bytes,3,opt,name=TaskTitle,proto3" json:"TaskTitle,omitempty"`                          // 任务标题
	Reward    []*Reward `protobuf:"bytes,4,rep,name=Reward,proto3" json:"Reward,omitempty"`                                // 任务奖励
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{10}
}

func (x *TaskConfig) GetTaskID() uint32 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskConfig) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TaskType_NONE
}

func (x *TaskConfig) GetTaskTitle() string {
	if x != nil {
		return x.TaskTitle
	}
	return ""
}

func (x *TaskConfig) GetReward() []*Reward {
	if x != nil {
		return x.Reward
	}
	return nil
}

type TaskConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*TaskConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *TaskConfigAry) Reset() {
	*x = TaskConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfigAry) ProtoMessage() {}

func (x *TaskConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfigAry.ProtoReflect.Descriptor instead.
func (*TaskConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{11}
}

func (x *TaskConfigAry) GetAry() []*TaskConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomStage      int32   `protobuf:"varint,1,opt,name=RoomStage,proto3" json:"RoomStage,omitempty"`             // 房间类型
	CoinType       int32   `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`               // 货币类型
	RoomKeepLive   int64   `protobuf:"varint,3,opt,name=RoomKeepLive,proto3" json:"RoomKeepLive,omitempty"`       // 房间存在时长(分钟)
	SmallBlind     int64   `protobuf:"varint,4,opt,name=SmallBlind,proto3" json:"SmallBlind,omitempty"`           // 小盲注
	BigBlind       int64   `protobuf:"varint,5,opt,name=BigBlind,proto3" json:"BigBlind,omitempty"`               // 大盲注
	MinBuyIn       int32   `protobuf:"varint,6,opt,name=MinBuyIn,proto3" json:"MinBuyIn,omitempty"`               // 最小买入筹码
	MaxBuyIn       int32   `protobuf:"varint,7,opt,name=MaxBuyIn,proto3" json:"MaxBuyIn,omitempty"`               // 最大买入筹码
	RakeRate       int64   `protobuf:"varint,8,opt,name=RakeRate,proto3" json:"RakeRate,omitempty"`               // 每局抽水万分比
	MaxPlayerCount uint32  `protobuf:"varint,9,opt,name=MaxPlayerCount,proto3" json:"MaxPlayerCount,omitempty"`   // 最大玩家人数
	RakeUpLimit    []int64 `protobuf:"varint,10,rep,packed,name=RakeUpLimit,proto3" json:"RakeUpLimit,omitempty"` // 每局多少人的抽水上限，2人，3人等抽水
	MaxRoomCount   uint32  `protobuf:"varint,11,opt,name=MaxRoomCount,proto3" json:"MaxRoomCount,omitempty"`      // 最大房间人数
	IsNoFlopNoDrop bool    `protobuf:"varint,12,opt,name=IsNoFlopNoDrop,proto3" json:"IsNoFlopNoDrop,omitempty"`  // 是否开启
	IsTest         bool    `protobuf:"varint,13,opt,name=IsTest,proto3" json:"IsTest,omitempty"`                  // 是否为测试
}

func (x *TexasConfig) Reset() {
	*x = TexasConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfig) ProtoMessage() {}

func (x *TexasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfig.ProtoReflect.Descriptor instead.
func (*TexasConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{12}
}

func (x *TexasConfig) GetRoomStage() int32 {
	if x != nil {
		return x.RoomStage
	}
	return 0
}

func (x *TexasConfig) GetCoinType() int32 {
	if x != nil {
		return x.CoinType
	}
	return 0
}

func (x *TexasConfig) GetRoomKeepLive() int64 {
	if x != nil {
		return x.RoomKeepLive
	}
	return 0
}

func (x *TexasConfig) GetSmallBlind() int64 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *TexasConfig) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *TexasConfig) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *TexasConfig) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *TexasConfig) GetRakeRate() int64 {
	if x != nil {
		return x.RakeRate
	}
	return 0
}

func (x *TexasConfig) GetMaxPlayerCount() uint32 {
	if x != nil {
		return x.MaxPlayerCount
	}
	return 0
}

func (x *TexasConfig) GetRakeUpLimit() []int64 {
	if x != nil {
		return x.RakeUpLimit
	}
	return nil
}

func (x *TexasConfig) GetMaxRoomCount() uint32 {
	if x != nil {
		return x.MaxRoomCount
	}
	return 0
}

func (x *TexasConfig) GetIsNoFlopNoDrop() bool {
	if x != nil {
		return x.IsNoFlopNoDrop
	}
	return false
}

func (x *TexasConfig) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

type TexasConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*TexasConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *TexasConfigAry) Reset() {
	*x = TexasConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasConfigAry) ProtoMessage() {}

func (x *TexasConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasConfigAry.ProtoReflect.Descriptor instead.
func (*TexasConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{13}
}

func (x *TexasConfigAry) GetAry() []*TexasConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

type TexasTestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round   uint32   `protobuf:"varint,1,opt,name=Round,proto3" json:"Round,omitempty"`     // 第几轮牌局
	Publics []string `protobuf:"bytes,2,rep,name=Publics,proto3" json:"Publics,omitempty"`  // 公共牌
	Chair1  string   `protobuf:"bytes,3,opt,name=Chair1,proto3" json:"Chair1,omitempty"`    // 玩家手牌
	Chair2  string   `protobuf:"bytes,4,opt,name=Chair2,proto3" json:"Chair2,omitempty"`    // 玩家手牌
	Chair3  string   `protobuf:"bytes,5,opt,name=Chair3,proto3" json:"Chair3,omitempty"`    // 玩家手牌
	Chair4  string   `protobuf:"bytes,6,opt,name=Chair4,proto3" json:"Chair4,omitempty"`    // 玩家手牌
	Chair5  string   `protobuf:"bytes,7,opt,name=Chair5,proto3" json:"Chair5,omitempty"`    // 玩家手牌
	Chair6  string   `protobuf:"bytes,8,opt,name=Chair6,proto3" json:"Chair6,omitempty"`    // 玩家手牌
	Chair7  string   `protobuf:"bytes,9,opt,name=Chair7,proto3" json:"Chair7,omitempty"`    // 玩家手牌
	Chair8  string   `protobuf:"bytes,10,opt,name=Chair8,proto3" json:"Chair8,omitempty"`   // 玩家手牌
	Chair9  string   `protobuf:"bytes,11,opt,name=Chair9,proto3" json:"Chair9,omitempty"`   // 玩家手牌
	Chair10 string   `protobuf:"bytes,12,opt,name=Chair10,proto3" json:"Chair10,omitempty"` // 玩家手牌
}

func (x *TexasTestConfig) Reset() {
	*x = TexasTestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfig) ProtoMessage() {}

func (x *TexasTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfig.ProtoReflect.Descriptor instead.
func (*TexasTestConfig) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{14}
}

func (x *TexasTestConfig) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasTestConfig) GetPublics() []string {
	if x != nil {
		return x.Publics
	}
	return nil
}

func (x *TexasTestConfig) GetChair1() string {
	if x != nil {
		return x.Chair1
	}
	return ""
}

func (x *TexasTestConfig) GetChair2() string {
	if x != nil {
		return x.Chair2
	}
	return ""
}

func (x *TexasTestConfig) GetChair3() string {
	if x != nil {
		return x.Chair3
	}
	return ""
}

func (x *TexasTestConfig) GetChair4() string {
	if x != nil {
		return x.Chair4
	}
	return ""
}

func (x *TexasTestConfig) GetChair5() string {
	if x != nil {
		return x.Chair5
	}
	return ""
}

func (x *TexasTestConfig) GetChair6() string {
	if x != nil {
		return x.Chair6
	}
	return ""
}

func (x *TexasTestConfig) GetChair7() string {
	if x != nil {
		return x.Chair7
	}
	return ""
}

func (x *TexasTestConfig) GetChair8() string {
	if x != nil {
		return x.Chair8
	}
	return ""
}

func (x *TexasTestConfig) GetChair9() string {
	if x != nil {
		return x.Chair9
	}
	return ""
}

func (x *TexasTestConfig) GetChair10() string {
	if x != nil {
		return x.Chair10
	}
	return ""
}

type TexasTestConfigAry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ary []*TexasTestConfig `protobuf:"bytes,1,rep,name=Ary,proto3" json:"Ary,omitempty"`
}

func (x *TexasTestConfigAry) Reset() {
	*x = TexasTestConfigAry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xlsx_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasTestConfigAry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasTestConfigAry) ProtoMessage() {}

func (x *TexasTestConfigAry) ProtoReflect() protoreflect.Message {
	mi := &file_xlsx_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasTestConfigAry.ProtoReflect.Descriptor instead.
func (*TexasTestConfigAry) Descriptor() ([]byte, []int) {
	return file_xlsx_config_proto_rawDescGZIP(), []int{15}
}

func (x *TexasTestConfigAry) GetAry() []*TexasTestConfig {
	if x != nil {
		return x.Ary
	}
	return nil
}

var File_xlsx_config_proto protoreflect.FileDescriptor

var file_xlsx_config_proto_rawDesc = []byte{
	0x0a, 0x11, 0x78, 0x6c, 0x73, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x1a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x44, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x57, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x44, 0x72, 0x6f, 0x70, 0x57, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73,
	0x52, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x52, 0x61,
	0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x72, 0x6f, 0x70,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79,
	0x22, 0xbe, 0x03, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x44, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x44, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x47, 0x65, 0x74, 0x57, 0x61, 0x79, 0x4a, 0x75, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x61, 0x6c,
	0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0xb1, 0x02,
	0x0a, 0x0d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x46,
	0x6c, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x54, 0x75, 0x72, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x69, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x52, 0x69, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x40, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x41, 0x72, 0x79, 0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x43, 0x6f,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43,
	0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x75, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x6d,
	0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x52, 0x6d, 0x62, 0x22, 0x3a, 0x0a, 0x0d,
	0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x29, 0x0a,
	0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x49, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x42, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x72, 0x79, 0x12, 0x2d, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72,
	0x79, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41,
	0x72, 0x79, 0x22, 0xa9, 0x03, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x4b, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x76, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x42, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x42,
	0x75, 0x79, 0x49, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x42,
	0x75, 0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x61, 0x6b, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x6b, 0x65,
	0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x52,
	0x61, 0x6b, 0x65, 0x55, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x70, 0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x4e, 0x6f, 0x46, 0x6c, 0x6f, 0x70,
	0x4e, 0x6f, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x73, 0x74, 0x22, 0x3c,
	0x0a, 0x0e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79,
	0x12, 0x2a, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x22, 0xb3, 0x02, 0x0a,
	0x0f, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x34,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x35, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x36, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x36,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x37, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x37, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x38, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x38,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x39, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x43, 0x68, 0x61, 0x69, 0x72, 0x39, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x72, 0x31, 0x30, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x72,
	0x31, 0x30, 0x22, 0x44, 0x0a, 0x12, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x41, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x03, 0x41, 0x72, 0x79, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x31,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_xlsx_config_proto_rawDescOnce sync.Once
	file_xlsx_config_proto_rawDescData = file_xlsx_config_proto_rawDesc
)

func file_xlsx_config_proto_rawDescGZIP() []byte {
	file_xlsx_config_proto_rawDescOnce.Do(func() {
		file_xlsx_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_xlsx_config_proto_rawDescData)
	})
	return file_xlsx_config_proto_rawDescData
}

var file_xlsx_config_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_xlsx_config_proto_goTypes = []interface{}{
	(*DropItemConfing)(nil),    // 0: g1.protocol.DropItemConfing
	(*DropItemConfingAry)(nil), // 1: g1.protocol.DropItemConfingAry
	(*ItemConfig)(nil),         // 2: g1.protocol.ItemConfig
	(*ItemConfigAry)(nil),      // 3: g1.protocol.ItemConfigAry
	(*MachineConfig)(nil),      // 4: g1.protocol.MachineConfig
	(*MachineConfigAry)(nil),   // 5: g1.protocol.MachineConfigAry
	(*MallConfig)(nil),         // 6: g1.protocol.MallConfig
	(*MallConfigAry)(nil),      // 7: g1.protocol.MallConfigAry
	(*RechargeConfig)(nil),     // 8: g1.protocol.RechargeConfig
	(*RechargeConfigAry)(nil),  // 9: g1.protocol.RechargeConfigAry
	(*TaskConfig)(nil),         // 10: g1.protocol.TaskConfig
	(*TaskConfigAry)(nil),      // 11: g1.protocol.TaskConfigAry
	(*TexasConfig)(nil),        // 12: g1.protocol.TexasConfig
	(*TexasConfigAry)(nil),     // 13: g1.protocol.TexasConfigAry
	(*TexasTestConfig)(nil),    // 14: g1.protocol.TexasTestConfig
	(*TexasTestConfigAry)(nil), // 15: g1.protocol.TexasTestConfigAry
	(TaskType)(0),              // 16: g1.protocol.TaskType
	(*Reward)(nil),             // 17: g1.protocol.Reward
}
var file_xlsx_config_proto_depIdxs = []int32{
	0,  // 0: g1.protocol.DropItemConfingAry.Ary:type_name -> g1.protocol.DropItemConfing
	2,  // 1: g1.protocol.ItemConfigAry.Ary:type_name -> g1.protocol.ItemConfig
	4,  // 2: g1.protocol.MachineConfigAry.Ary:type_name -> g1.protocol.MachineConfig
	6,  // 3: g1.protocol.MallConfigAry.Ary:type_name -> g1.protocol.MallConfig
	8,  // 4: g1.protocol.RechargeConfigAry.Ary:type_name -> g1.protocol.RechargeConfig
	16, // 5: g1.protocol.TaskConfig.TaskType:type_name -> g1.protocol.TaskType
	17, // 6: g1.protocol.TaskConfig.Reward:type_name -> g1.protocol.Reward
	10, // 7: g1.protocol.TaskConfigAry.Ary:type_name -> g1.protocol.TaskConfig
	12, // 8: g1.protocol.TexasConfigAry.Ary:type_name -> g1.protocol.TexasConfig
	14, // 9: g1.protocol.TexasTestConfigAry.Ary:type_name -> g1.protocol.TexasTestConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_xlsx_config_proto_init() }
func file_xlsx_config_proto_init() {
	if File_xlsx_config_proto != nil {
		return
	}
	file_enum_config_proto_init()
	file_struct_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_xlsx_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropItemConfing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropItemConfingAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MallConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RechargeConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasTestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xlsx_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasTestConfigAry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xlsx_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xlsx_config_proto_goTypes,
		DependencyIndexes: file_xlsx_config_proto_depIdxs,
		MessageInfos:      file_xlsx_config_proto_msgTypes,
	}.Build()
	File_xlsx_config_proto = out.File
	file_xlsx_config_proto_rawDesc = nil
	file_xlsx_config_proto_goTypes = nil
	file_xlsx_config_proto_depIdxs = nil
}
