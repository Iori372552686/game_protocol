// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: game_enum.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardType int32

const (
	CardType_CARD_TYPE_NONE  CardType = 0  // 无效牌型
	CardType_HIGH_CARD       CardType = 1  // 高牌
	CardType_ONE_PAIR        CardType = 2  // 一对
	CardType_TWO_PAIR        CardType = 3  // 两对
	CardType_THREE_OF_A_KIND CardType = 4  // 三条
	CardType_STRAIGHT        CardType = 5  // 顺子
	CardType_FLUSH           CardType = 6  // 同花
	CardType_FULL_HOUSE      CardType = 7  // 葫芦
	CardType_FOUR_OF_A_KIND  CardType = 8  // 四条
	CardType_STRAIGHT_FLUSH  CardType = 9  // 同花顺
	CardType_ROYAL_FLUSH     CardType = 10 // 皇家同花顺
	CardType_STRAIGHT_MASK   CardType = 31 // 顺子掩码
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0:  "CARD_TYPE_NONE",
		1:  "HIGH_CARD",
		2:  "ONE_PAIR",
		3:  "TWO_PAIR",
		4:  "THREE_OF_A_KIND",
		5:  "STRAIGHT",
		6:  "FLUSH",
		7:  "FULL_HOUSE",
		8:  "FOUR_OF_A_KIND",
		9:  "STRAIGHT_FLUSH",
		10: "ROYAL_FLUSH",
		31: "STRAIGHT_MASK",
	}
	CardType_value = map[string]int32{
		"CARD_TYPE_NONE":  0,
		"HIGH_CARD":       1,
		"ONE_PAIR":        2,
		"TWO_PAIR":        3,
		"THREE_OF_A_KIND": 4,
		"STRAIGHT":        5,
		"FLUSH":           6,
		"FULL_HOUSE":      7,
		"FOUR_OF_A_KIND":  8,
		"STRAIGHT_FLUSH":  9,
		"ROYAL_FLUSH":     10,
		"STRAIGHT_MASK":   31,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[0].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[0]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{0}
}

// 花色定义
type Color int32

const (
	Color_COLOR_NONE    Color = 0 // 无花色
	Color_COLOR_DIAMOND Color = 1 // 1
	Color_COLOR_CLUB    Color = 2 // 2
	Color_COLOR_HEART   Color = 4 // 4
	Color_COLOR_SPADE   Color = 8 // 8
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "COLOR_NONE",
		1: "COLOR_DIAMOND",
		2: "COLOR_CLUB",
		4: "COLOR_HEART",
		8: "COLOR_SPADE",
	}
	Color_value = map[string]int32{
		"COLOR_NONE":    0,
		"COLOR_DIAMOND": 1,
		"COLOR_CLUB":    2,
		"COLOR_HEART":   4,
		"COLOR_SPADE":   8,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[1].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[1]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{1}
}

// 点数
type Rank int32

const (
	Rank_Rank_0  Rank = 0 // 无点数
	Rank_RANK_1  Rank = 1 // A座位1的时候
	Rank_RANK_2  Rank = 2
	Rank_RANK_3  Rank = 3
	Rank_RANK_4  Rank = 4
	Rank_RANK_5  Rank = 5
	Rank_RANK_6  Rank = 6
	Rank_RANK_7  Rank = 7
	Rank_RANK_8  Rank = 8
	Rank_RANK_9  Rank = 9
	Rank_RANK_10 Rank = 10
	Rank_RANK_J  Rank = 11
	Rank_RANK_Q  Rank = 12
	Rank_RANK_K  Rank = 13
	Rank_RANK_A  Rank = 14
)

// Enum value maps for Rank.
var (
	Rank_name = map[int32]string{
		0:  "Rank_0",
		1:  "RANK_1",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
		14: "RANK_A",
	}
	Rank_value = map[string]int32{
		"Rank_0":  0,
		"RANK_1":  1,
		"RANK_2":  2,
		"RANK_3":  3,
		"RANK_4":  4,
		"RANK_5":  5,
		"RANK_6":  6,
		"RANK_7":  7,
		"RANK_8":  8,
		"RANK_9":  9,
		"RANK_10": 10,
		"RANK_J":  11,
		"RANK_Q":  12,
		"RANK_K":  13,
		"RANK_A":  14,
	}
)

func (x Rank) Enum() *Rank {
	p := new(Rank)
	*p = x
	return p
}

func (x Rank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rank) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[2].Descriptor()
}

func (Rank) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[2]
}

func (x Rank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rank.Descriptor instead.
func (Rank) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{2}
}

type GameState int32

const (
	GameState_STATE_INIT        GameState = 0 // 初始化状态
	GameState_STATE_START       GameState = 1 // 游戏开始阶段（包含底注和发底牌）
	GameState_STATE_PRE_FLOP    GameState = 2 // 底牌前下注轮（Pre-Flop）
	GameState_STATE_FLOP_ROUND  GameState = 3 // 翻牌圈（三张公共牌）
	GameState_STATE_TURN_ROUND  GameState = 4 // 转牌圈（第四张公共牌）
	GameState_STATE_RIVER_ROUND GameState = 5 // 河牌圈（第五张公共牌）
	GameState_STATE_END         GameState = 6 // 结算阶段
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "STATE_INIT",
		1: "STATE_START",
		2: "STATE_PRE_FLOP",
		3: "STATE_FLOP_ROUND",
		4: "STATE_TURN_ROUND",
		5: "STATE_RIVER_ROUND",
		6: "STATE_END",
	}
	GameState_value = map[string]int32{
		"STATE_INIT":        0,
		"STATE_START":       1,
		"STATE_PRE_FLOP":    2,
		"STATE_FLOP_ROUND":  3,
		"STATE_TURN_ROUND":  4,
		"STATE_RIVER_ROUND": 5,
		"STATE_END":         6,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[3].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[3]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{3}
}

type GameCompetitionType int32

const (
	GameCompetitionType_NORMAL GameCompetitionType = 0 // 默认值，非赛事玩法
	GameCompetitionType_SNG    GameCompetitionType = 1 // sng赛事
	GameCompetitionType_MTT    GameCompetitionType = 2 // mtt赛事
)

// Enum value maps for GameCompetitionType.
var (
	GameCompetitionType_name = map[int32]string{
		0: "NORMAL",
		1: "SNG",
		2: "MTT",
	}
	GameCompetitionType_value = map[string]int32{
		"NORMAL": 0,
		"SNG":    1,
		"MTT":    2,
	}
)

func (x GameCompetitionType) Enum() *GameCompetitionType {
	p := new(GameCompetitionType)
	*p = x
	return p
}

func (x GameCompetitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCompetitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[4].Descriptor()
}

func (GameCompetitionType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[4]
}

func (x GameCompetitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCompetitionType.Descriptor instead.
func (GameCompetitionType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{4}
}

type GameTypeId int32

const (
	//texas
	GameTypeId_TEXAS_MODE_START GameTypeId = 0 // texas玩法开始
	GameTypeId_TEXAS_NORMAL     GameTypeId = 1 // 德州常规玩法
	GameTypeId_TEXAS_SHORT      GameTypeId = 2 // 德州短牌玩法
	GameTypeId_TEXAS_AOF        GameTypeId = 3 // 德州AOF玩法
	GameTypeId_TEXAS_PLO        GameTypeId = 4 // 德州omaha 4张
	GameTypeId_TEXAS_PLO5       GameTypeId = 5 // 德州omaha 5张
	GameTypeId_TEXAS_PLO6       GameTypeId = 6 // 德州omaha 6张
	GameTypeId_TEXAS_MODE_END   GameTypeId = 7 // texas玩法结束
	//rummy
	GameTypeId_RUMMY_MODE_START GameTypeId = 20 // RUMMY玩法开始
	GameTypeId_RUMMY_NORMAL     GameTypeId = 21 // RUMMY常规玩法
)

// Enum value maps for GameTypeId.
var (
	GameTypeId_name = map[int32]string{
		0:  "TEXAS_MODE_START",
		1:  "TEXAS_NORMAL",
		2:  "TEXAS_SHORT",
		3:  "TEXAS_AOF",
		4:  "TEXAS_PLO",
		5:  "TEXAS_PLO5",
		6:  "TEXAS_PLO6",
		7:  "TEXAS_MODE_END",
		20: "RUMMY_MODE_START",
		21: "RUMMY_NORMAL",
	}
	GameTypeId_value = map[string]int32{
		"TEXAS_MODE_START": 0,
		"TEXAS_NORMAL":     1,
		"TEXAS_SHORT":      2,
		"TEXAS_AOF":        3,
		"TEXAS_PLO":        4,
		"TEXAS_PLO5":       5,
		"TEXAS_PLO6":       6,
		"TEXAS_MODE_END":   7,
		"RUMMY_MODE_START": 20,
		"RUMMY_NORMAL":     21,
	}
)

func (x GameTypeId) Enum() *GameTypeId {
	p := new(GameTypeId)
	*p = x
	return p
}

func (x GameTypeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameTypeId) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[5].Descriptor()
}

func (GameTypeId) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[5]
}

func (x GameTypeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameTypeId.Descriptor instead.
func (GameTypeId) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{5}
}

type CoinType int32

const (
	CoinType_COIN_NONE  CoinType = 0 // 无效币种
	CoinType_COIN_GOLD  CoinType = 1 // 金币
	CoinType_COIN_ACE   CoinType = 2 // Ace coin
	CoinType_COIN_SCORE CoinType = 3 // 积分
)

// Enum value maps for CoinType.
var (
	CoinType_name = map[int32]string{
		0: "COIN_NONE",
		1: "COIN_GOLD",
		2: "COIN_ACE",
		3: "COIN_SCORE",
	}
	CoinType_value = map[string]int32{
		"COIN_NONE":  0,
		"COIN_GOLD":  1,
		"COIN_ACE":   2,
		"COIN_SCORE": 3,
	}
)

func (x CoinType) Enum() *CoinType {
	p := new(CoinType)
	*p = x
	return p
}

func (x CoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[6].Descriptor()
}

func (CoinType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[6]
}

func (x CoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinType.Descriptor instead.
func (CoinType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{6}
}

type RoomStage int32

const (
	RoomStage_Free      RoomStage = 0  // 免费模式，体验模式
	RoomStage_LOW       RoomStage = 1  // 初级
	RoomStage_MIDDLE    RoomStage = 2  // 中级
	RoomStage_HIGH      RoomStage = 3  // 高级
	RoomStage_Stage_ALL RoomStage = 99 // 全部类型
)

// Enum value maps for RoomStage.
var (
	RoomStage_name = map[int32]string{
		0:  "Free",
		1:  "LOW",
		2:  "MIDDLE",
		3:  "HIGH",
		99: "Stage_ALL",
	}
	RoomStage_value = map[string]int32{
		"Free":      0,
		"LOW":       1,
		"MIDDLE":    2,
		"HIGH":      3,
		"Stage_ALL": 99,
	}
)

func (x RoomStage) Enum() *RoomStage {
	p := new(RoomStage)
	*p = x
	return p
}

func (x RoomStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStage) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[7].Descriptor()
}

func (RoomStage) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[7]
}

func (x RoomStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStage.Descriptor instead.
func (RoomStage) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{7}
}

type RoomState int32

const (
	RoomState_WAITSTART RoomState = 0 // 等待开始
	RoomState_PLAYING   RoomState = 1 // 比赛中
	RoomState_END       RoomState = 2 // 已结束
	RoomState_PAUSE     RoomState = 3 //房间状态暂停
)

// Enum value maps for RoomState.
var (
	RoomState_name = map[int32]string{
		0: "WAITSTART",
		1: "PLAYING",
		2: "END",
		3: "PAUSE",
	}
	RoomState_value = map[string]int32{
		"WAITSTART": 0,
		"PLAYING":   1,
		"END":       2,
		"PAUSE":     3,
	}
)

func (x RoomState) Enum() *RoomState {
	p := new(RoomState)
	*p = x
	return p
}

func (x RoomState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomState) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[8].Descriptor()
}

func (RoomState) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[8]
}

func (x RoomState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomState.Descriptor instead.
func (RoomState) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{8}
}

// betting round enum
type BettingRound int32

const (
	BettingRound_NULL    BettingRound = 0 // 默认值，表示未定义或无效的下注轮次
	BettingRound_ANTE    BettingRound = 1 // 底注轮次，玩家在游戏开始前下底注
	BettingRound_PREFLOP BettingRound = 2 // 翻牌前轮次，玩家在发出公共牌前下注
	BettingRound_FLOP    BettingRound = 3 // 翻牌轮次，发出前三张公共牌后的下注轮次
	BettingRound_TURN    BettingRound = 4 // 转牌轮次，发出第四张公共牌后的下注轮次
	BettingRound_RIVER   BettingRound = 5 // 河牌轮次，发出第五张公共牌后的下注轮次
)

// Enum value maps for BettingRound.
var (
	BettingRound_name = map[int32]string{
		0: "NULL",
		1: "ANTE",
		2: "PREFLOP",
		3: "FLOP",
		4: "TURN",
		5: "RIVER",
	}
	BettingRound_value = map[string]int32{
		"NULL":    0,
		"ANTE":    1,
		"PREFLOP": 2,
		"FLOP":    3,
		"TURN":    4,
		"RIVER":   5,
	}
)

func (x BettingRound) Enum() *BettingRound {
	p := new(BettingRound)
	*p = x
	return p
}

func (x BettingRound) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BettingRound) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[9].Descriptor()
}

func (BettingRound) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[9]
}

func (x BettingRound) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BettingRound.Descriptor instead.
func (BettingRound) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{9}
}

type RoomSortType int32

const (
	RoomSortType_SORT_TYPE_NONE   RoomSortType = 0 // 默认值
	RoomSortType_SORT_TYPE_ID     RoomSortType = 1 // ID排序
	RoomSortType_SORT_TYPE_PLAYER RoomSortType = 2 // 玩家人数排序
	RoomSortType_SORT_TYPE_TIME   RoomSortType = 3 // 时间排序
)

// Enum value maps for RoomSortType.
var (
	RoomSortType_name = map[int32]string{
		0: "SORT_TYPE_NONE",
		1: "SORT_TYPE_ID",
		2: "SORT_TYPE_PLAYER",
		3: "SORT_TYPE_TIME",
	}
	RoomSortType_value = map[string]int32{
		"SORT_TYPE_NONE":   0,
		"SORT_TYPE_ID":     1,
		"SORT_TYPE_PLAYER": 2,
		"SORT_TYPE_TIME":   3,
	}
)

func (x RoomSortType) Enum() *RoomSortType {
	p := new(RoomSortType)
	*p = x
	return p
}

func (x RoomSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[10].Descriptor()
}

func (RoomSortType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[10]
}

func (x RoomSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomSortType.Descriptor instead.
func (RoomSortType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{10}
}

// 游戏状态操作type
type OperateType int32

const (
	OperateType_OPERATE_NONE    OperateType = 0 // 无效操作
	OperateType_BET             OperateType = 1 // 下注
	OperateType_CALL            OperateType = 2 // 跟注
	OperateType_RAISE           OperateType = 3 // 加注
	OperateType_CHECK           OperateType = 4 // 看牌
	OperateType_FOLD            OperateType = 5 // 弃牌
	OperateType_ALL_IN          OperateType = 6 // 全下
	OperateType_BET_BIG_BLIND   OperateType = 7 // 下大盲
	OperateType_BET_SMALL_BLIND OperateType = 8 // 下小盲
	OperateType_BET_ANTE        OperateType = 9 // 下前注
)

// Enum value maps for OperateType.
var (
	OperateType_name = map[int32]string{
		0: "OPERATE_NONE",
		1: "BET",
		2: "CALL",
		3: "RAISE",
		4: "CHECK",
		5: "FOLD",
		6: "ALL_IN",
		7: "BET_BIG_BLIND",
		8: "BET_SMALL_BLIND",
		9: "BET_ANTE",
	}
	OperateType_value = map[string]int32{
		"OPERATE_NONE":    0,
		"BET":             1,
		"CALL":            2,
		"RAISE":           3,
		"CHECK":           4,
		"FOLD":            5,
		"ALL_IN":          6,
		"BET_BIG_BLIND":   7,
		"BET_SMALL_BLIND": 8,
		"BET_ANTE":        9,
	}
)

func (x OperateType) Enum() *OperateType {
	p := new(OperateType)
	*p = x
	return p
}

func (x OperateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperateType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[11].Descriptor()
}

func (OperateType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[11]
}

func (x OperateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperateType.Descriptor instead.
func (OperateType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{11}
}

// 游戏事件类型
type GameNotifyType int32

const (
	GameNotifyType_EVENT_NONE            GameNotifyType = 0  // 缺省通知
	GameNotifyType_EVENT_BET             GameNotifyType = 1  // 下注
	GameNotifyType_EVENT_CALL            GameNotifyType = 2  // 跟注
	GameNotifyType_EVENT_RAISE           GameNotifyType = 3  // 加注
	GameNotifyType_EVENT_CHECK           GameNotifyType = 4  // 看牌
	GameNotifyType_EVENT_FOLD            GameNotifyType = 5  // 弃牌
	GameNotifyType_EVENT_BET_BIG_BLIND   GameNotifyType = 6  // 下大盲
	GameNotifyType_EVENT_BET_SMALL_BLIND GameNotifyType = 7  // 下小盲
	GameNotifyType_EVENT_BET_PRE_FOLP    GameNotifyType = 8  // 翻牌下前注
	GameNotifyType_EVENT_DEAL            GameNotifyType = 9  // 发牌
	GameNotifyType_EVENT_SIT_DOWN        GameNotifyType = 10 // 坐下
	GameNotifyType_EVENT_STAND_UP        GameNotifyType = 11 // 站起
	GameNotifyType_EVENT_LEAVE           GameNotifyType = 12 // 离开
	GameNotifyType_EVENT_READY           GameNotifyType = 13 // 准备
	GameNotifyType_EVENT_CANCEL_READY    GameNotifyType = 14 // 取消准备
	GameNotifyType_EVENT_GAME_START      GameNotifyType = 15 // 游戏开始
	GameNotifyType_EVENT_GAME_END        GameNotifyType = 16 // 游戏结束
	GameNotifyType_EVENT_GAME_PAUSE      GameNotifyType = 17 // 游戏暂停
	GameNotifyType_EVENT_GAME_RESUME     GameNotifyType = 18 // 游戏恢复
	GameNotifyType_EVENT_GAME_RESET      GameNotifyType = 19 // 游戏重置
	GameNotifyType_EVENT_BLIND           GameNotifyType = 20 // 涨盲
	//EVENT_BET_FOLP        = 21; // 转牌后前注
	//EVENT_BET_TURN        = 22; // 转牌后前注
	//EVENT_BET_RIVER       = 23; // 河牌后前注
	GameNotifyType_EVENT_FLOP_CARD GameNotifyType = 24 // 翻牌，翻转牌，翻和牌
)

// Enum value maps for GameNotifyType.
var (
	GameNotifyType_name = map[int32]string{
		0:  "EVENT_NONE",
		1:  "EVENT_BET",
		2:  "EVENT_CALL",
		3:  "EVENT_RAISE",
		4:  "EVENT_CHECK",
		5:  "EVENT_FOLD",
		6:  "EVENT_BET_BIG_BLIND",
		7:  "EVENT_BET_SMALL_BLIND",
		8:  "EVENT_BET_PRE_FOLP",
		9:  "EVENT_DEAL",
		10: "EVENT_SIT_DOWN",
		11: "EVENT_STAND_UP",
		12: "EVENT_LEAVE",
		13: "EVENT_READY",
		14: "EVENT_CANCEL_READY",
		15: "EVENT_GAME_START",
		16: "EVENT_GAME_END",
		17: "EVENT_GAME_PAUSE",
		18: "EVENT_GAME_RESUME",
		19: "EVENT_GAME_RESET",
		20: "EVENT_BLIND",
		24: "EVENT_FLOP_CARD",
	}
	GameNotifyType_value = map[string]int32{
		"EVENT_NONE":            0,
		"EVENT_BET":             1,
		"EVENT_CALL":            2,
		"EVENT_RAISE":           3,
		"EVENT_CHECK":           4,
		"EVENT_FOLD":            5,
		"EVENT_BET_BIG_BLIND":   6,
		"EVENT_BET_SMALL_BLIND": 7,
		"EVENT_BET_PRE_FOLP":    8,
		"EVENT_DEAL":            9,
		"EVENT_SIT_DOWN":        10,
		"EVENT_STAND_UP":        11,
		"EVENT_LEAVE":           12,
		"EVENT_READY":           13,
		"EVENT_CANCEL_READY":    14,
		"EVENT_GAME_START":      15,
		"EVENT_GAME_END":        16,
		"EVENT_GAME_PAUSE":      17,
		"EVENT_GAME_RESUME":     18,
		"EVENT_GAME_RESET":      19,
		"EVENT_BLIND":           20,
		"EVENT_FLOP_CARD":       24,
	}
)

func (x GameNotifyType) Enum() *GameNotifyType {
	p := new(GameNotifyType)
	*p = x
	return p
}

func (x GameNotifyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameNotifyType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[12].Descriptor()
}

func (GameNotifyType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[12]
}

func (x GameNotifyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameNotifyType.Descriptor instead.
func (GameNotifyType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{12}
}

// 玩家状态(正在游戏中的玩家可以预操作：退出牌桌)
type PlayerState int32

const (
	PlayerState_PLAYER_STATE_NONE PlayerState = 0
	PlayerState_JOIN_ROOM         PlayerState = 1 // 加入房间
	PlayerState_JOIN_TABLE        PlayerState = 2 // 加入牌桌
	PlayerState_QUIT_TABLE        PlayerState = 3 // 退出牌桌(不在加入下一轮游戏)
	PlayerState_QUIT_ROOM         PlayerState = 4 // 结算完成
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0: "PLAYER_STATE_NONE",
		1: "JOIN_ROOM",
		2: "JOIN_TABLE",
		3: "QUIT_TABLE",
		4: "QUIT_ROOM",
	}
	PlayerState_value = map[string]int32{
		"PLAYER_STATE_NONE": 0,
		"JOIN_ROOM":         1,
		"JOIN_TABLE":        2,
		"QUIT_TABLE":        3,
		"QUIT_ROOM":         4,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[13].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[13]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{13}
}

// 发牌类型
type DealType int32

const (
	DealType_DEAL_NONE  DealType = 0 // 无效发牌
	DealType_DEAL_HAND  DealType = 1 // 发手牌
	DealType_DEAL_FLOP  DealType = 2 // 发翻牌
	DealType_DEAL_TURN  DealType = 3 // 发转牌
	DealType_DEAL_RIVER DealType = 4 // 发河牌
)

// Enum value maps for DealType.
var (
	DealType_name = map[int32]string{
		0: "DEAL_NONE",
		1: "DEAL_HAND",
		2: "DEAL_FLOP",
		3: "DEAL_TURN",
		4: "DEAL_RIVER",
	}
	DealType_value = map[string]int32{
		"DEAL_NONE":  0,
		"DEAL_HAND":  1,
		"DEAL_FLOP":  2,
		"DEAL_TURN":  3,
		"DEAL_RIVER": 4,
	}
)

func (x DealType) Enum() *DealType {
	p := new(DealType)
	*p = x
	return p
}

func (x DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[14].Descriptor()
}

func (DealType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[14]
}

func (x DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealType.Descriptor instead.
func (DealType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{14}
}

// 数据类型
type DataType int32

const (
	DataType_DATA_TYPE_NONE              DataType = 0 // 无效数据
	DataType_DATA_TYPE_TEXAS_GAME_RECORD DataType = 1 // 德州扑克游戏记录
	DataType_DATA_TYPE_PLAYER_INFO       DataType = 2 // 玩家游戏信息
	DataType_DATA_TYPE_TEXAS_ROOM_INFO   DataType = 3 // 德州扑克房间信息
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0: "DATA_TYPE_NONE",
		1: "DATA_TYPE_TEXAS_GAME_RECORD",
		2: "DATA_TYPE_PLAYER_INFO",
		3: "DATA_TYPE_TEXAS_ROOM_INFO",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_NONE":              0,
		"DATA_TYPE_TEXAS_GAME_RECORD": 1,
		"DATA_TYPE_PLAYER_INFO":       2,
		"DATA_TYPE_TEXAS_ROOM_INFO":   3,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_game_enum_proto_enumTypes[15].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_game_enum_proto_enumTypes[15]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_game_enum_proto_rawDescGZIP(), []int{15}
}

var File_game_enum_proto protoreflect.FileDescriptor

var file_game_enum_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2a, 0xd3,
	0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x57, 0x4f, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c,
	0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x55, 0x52,
	0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x09,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x41,
	0x53, 0x4b, 0x10, 0x1f, 0x2a, 0x5c, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x50, 0x41, 0x44, 0x45,
	0x10, 0x08, 0x2a, 0xbb, 0x01, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x61, 0x6e, 0x6b, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x32, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x39, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x31, 0x30, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x51, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x4b, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x10, 0x0e,
	0x2a, 0x92, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x52,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x06, 0x2a, 0x33, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x54, 0x54, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x45, 0x58,
	0x41, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x41, 0x4f, 0x46, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x4f, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x4f, 0x35, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x4f, 0x36, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x55,
	0x4d, 0x4d, 0x59, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x15, 0x2a, 0x46, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x49, 0x4e, 0x5f,
	0x47, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x41,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x03, 0x2a, 0x43, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c,
	0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x63, 0x2a, 0x3b, 0x0a, 0x09, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x41, 0x49, 0x54, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x4e, 0x0a, 0x0c, 0x42, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x4e, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x45, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f, 0x50, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x49, 0x56, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x5e, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x94, 0x01, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x54, 0x5f, 0x42,
	0x49, 0x47, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x45,
	0x54, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x45, 0x54, 0x5f, 0x41, 0x4e, 0x54, 0x45, 0x10, 0x09, 0x2a, 0xc2, 0x03,
	0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x42,
	0x49, 0x47, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4c,
	0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x50, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x5f, 0x55, 0x50, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0e, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47,
	0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x11, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4d, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44, 0x10, 0x14, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x10, 0x18, 0x2a, 0x62, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x4f, 0x49, 0x4e,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x55, 0x49, 0x54, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x49, 0x54, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0x56, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x79,
	0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x41,
	0x53, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67,
	0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_game_enum_proto_rawDescOnce sync.Once
	file_game_enum_proto_rawDescData = file_game_enum_proto_rawDesc
)

func file_game_enum_proto_rawDescGZIP() []byte {
	file_game_enum_proto_rawDescOnce.Do(func() {
		file_game_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_game_enum_proto_rawDescData)
	})
	return file_game_enum_proto_rawDescData
}

var file_game_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_game_enum_proto_goTypes = []interface{}{
	(CardType)(0),            // 0: g1.protocol.CardType
	(Color)(0),               // 1: g1.protocol.Color
	(Rank)(0),                // 2: g1.protocol.Rank
	(GameState)(0),           // 3: g1.protocol.GameState
	(GameCompetitionType)(0), // 4: g1.protocol.GameCompetitionType
	(GameTypeId)(0),          // 5: g1.protocol.GameTypeId
	(CoinType)(0),            // 6: g1.protocol.CoinType
	(RoomStage)(0),           // 7: g1.protocol.RoomStage
	(RoomState)(0),           // 8: g1.protocol.RoomState
	(BettingRound)(0),        // 9: g1.protocol.BettingRound
	(RoomSortType)(0),        // 10: g1.protocol.RoomSortType
	(OperateType)(0),         // 11: g1.protocol.OperateType
	(GameNotifyType)(0),      // 12: g1.protocol.GameNotifyType
	(PlayerState)(0),         // 13: g1.protocol.PlayerState
	(DealType)(0),            // 14: g1.protocol.DealType
	(DataType)(0),            // 15: g1.protocol.DataType
}
var file_game_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_game_enum_proto_init() }
func file_game_enum_proto_init() {
	if File_game_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_game_enum_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_game_enum_proto_goTypes,
		DependencyIndexes: file_game_enum_proto_depIdxs,
		EnumInfos:         file_game_enum_proto_enumTypes,
	}.Build()
	File_game_enum_proto = out.File
	file_game_enum_proto_rawDesc = nil
	file_game_enum_proto_goTypes = nil
	file_game_enum_proto_depIdxs = nil
}
