// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: common.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DBType int32

const (
	DBType__DB_ZERO                 DBType = 0
	DBType_DB_TYPE_ROLE             DBType = 1  // 玩家角色的详细数据
	DBType_DB_TYPE_ACCOUNT          DBType = 2  // 每个区当前账号数量，用于生成账号
	DBType_DB_TYPE_BRIEF_INFO       DBType = 3  // 角色实时摘要信息
	DBType_DB_TYPE_RANK             DBType = 4  // 各种排行榜
	DBType_DB_TYPE_GUILD            DBType = 5  // 公会
	DBType_DB_TYPE_MAIL             DBType = 6  // 邮件
	DBType_DB_TYPE_CHAT             DBType = 7  // 离线聊天数据
	DBType_DB_TYPE_FRIEND           DBType = 8  // 好友数据
	DBType_DB_TYPE_ROOM_CENTER_INFO DBType = 9  // 房间中心数据
	DBType_DB_TYPE_TEXAS_ROOM       DBType = 10 // 德州房间缓存数据
	DBType_DB_TYPE_RUMMY_ROOM       DBType = 11 // 拉米牌房间缓存数据
	DBType_DB_TYPE_MISC             DBType = 99 // 一些单独的key
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0:  "_DB_ZERO",
		1:  "DB_TYPE_ROLE",
		2:  "DB_TYPE_ACCOUNT",
		3:  "DB_TYPE_BRIEF_INFO",
		4:  "DB_TYPE_RANK",
		5:  "DB_TYPE_GUILD",
		6:  "DB_TYPE_MAIL",
		7:  "DB_TYPE_CHAT",
		8:  "DB_TYPE_FRIEND",
		9:  "DB_TYPE_ROOM_CENTER_INFO",
		10: "DB_TYPE_TEXAS_ROOM",
		11: "DB_TYPE_RUMMY_ROOM",
		99: "DB_TYPE_MISC",
	}
	DBType_value = map[string]int32{
		"_DB_ZERO":                 0,
		"DB_TYPE_ROLE":             1,
		"DB_TYPE_ACCOUNT":          2,
		"DB_TYPE_BRIEF_INFO":       3,
		"DB_TYPE_RANK":             4,
		"DB_TYPE_GUILD":            5,
		"DB_TYPE_MAIL":             6,
		"DB_TYPE_CHAT":             7,
		"DB_TYPE_FRIEND":           8,
		"DB_TYPE_ROOM_CENTER_INFO": 9,
		"DB_TYPE_TEXAS_ROOM":       10,
		"DB_TYPE_RUMMY_ROOM":       11,
		"DB_TYPE_MISC":             99,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type EKickOutReason int32

const (
	EKickOutReason_UNKNOWN           EKickOutReason = 0
	EKickOutReason_HEARTBEAT_TIMEOUT EKickOutReason = 1
	EKickOutReason_MULTI_PLACE_LOGIN EKickOutReason = 2
)

// Enum value maps for EKickOutReason.
var (
	EKickOutReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEARTBEAT_TIMEOUT",
		2: "MULTI_PLACE_LOGIN",
	}
	EKickOutReason_value = map[string]int32{
		"UNKNOWN":           0,
		"HEARTBEAT_TIMEOUT": 1,
		"MULTI_PLACE_LOGIN": 2,
	}
)

func (x EKickOutReason) Enum() *EKickOutReason {
	p := new(EKickOutReason)
	*p = x
	return p
}

func (x EKickOutReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EKickOutReason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (EKickOutReason) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x EKickOutReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EKickOutReason.Descriptor instead.
func (EKickOutReason) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// 玩家数据段
type ERoleSectionFlag int32

const (
	ERoleSectionFlag__ERoleSectionFlag_ZERO ERoleSectionFlag = 0
	ERoleSectionFlag_ALL                    ERoleSectionFlag = -1
	ERoleSectionFlag_REGISTER_INFO          ERoleSectionFlag = 1
	ERoleSectionFlag_LOGIN_INFO             ERoleSectionFlag = 2
	ERoleSectionFlag_GAME_INFO              ERoleSectionFlag = 4
	ERoleSectionFlag_BASIC_INFO             ERoleSectionFlag = 8
	ERoleSectionFlag_INVENTORY_INFO         ERoleSectionFlag = 16
	ERoleSectionFlag_ICON_INFO              ERoleSectionFlag = 32
	ERoleSectionFlag_MALL_INFO              ERoleSectionFlag = 64
	ERoleSectionFlag_MAIN_TASK_INFO         ERoleSectionFlag = 128
	ERoleSectionFlag_GUILD_INFO             ERoleSectionFlag = 256
	ERoleSectionFlag_GUIDE_INFO             ERoleSectionFlag = 512
	ERoleSectionFlag_OPEN_FUNC_INFO         ERoleSectionFlag = 1024
	ERoleSectionFlag_ACTVITY_TASK_INFO      ERoleSectionFlag = 2048
)

// Enum value maps for ERoleSectionFlag.
var (
	ERoleSectionFlag_name = map[int32]string{
		0:    "_ERoleSectionFlag_ZERO",
		-1:   "ALL",
		1:    "REGISTER_INFO",
		2:    "LOGIN_INFO",
		4:    "GAME_INFO",
		8:    "BASIC_INFO",
		16:   "INVENTORY_INFO",
		32:   "ICON_INFO",
		64:   "MALL_INFO",
		128:  "MAIN_TASK_INFO",
		256:  "GUILD_INFO",
		512:  "GUIDE_INFO",
		1024: "OPEN_FUNC_INFO",
		2048: "ACTVITY_TASK_INFO",
	}
	ERoleSectionFlag_value = map[string]int32{
		"_ERoleSectionFlag_ZERO": 0,
		"ALL":                    -1,
		"REGISTER_INFO":          1,
		"LOGIN_INFO":             2,
		"GAME_INFO":              4,
		"BASIC_INFO":             8,
		"INVENTORY_INFO":         16,
		"ICON_INFO":              32,
		"MALL_INFO":              64,
		"MAIN_TASK_INFO":         128,
		"GUILD_INFO":             256,
		"GUIDE_INFO":             512,
		"OPEN_FUNC_INFO":         1024,
		"ACTVITY_TASK_INFO":      2048,
	}
)

func (x ERoleSectionFlag) Enum() *ERoleSectionFlag {
	p := new(ERoleSectionFlag)
	*p = x
	return p
}

func (x ERoleSectionFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERoleSectionFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (ERoleSectionFlag) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x ERoleSectionFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERoleSectionFlag.Descriptor instead.
func (ERoleSectionFlag) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

// 一些常用的道具ID
type EItemID int32

const (
	EItemID__ITEM_ID_NONE    EItemID = 0
	EItemID_EXP              EItemID = 10101001
	EItemID_GOLD             EItemID = 10101002
	EItemID_DIAMOND          EItemID = 10101003
	EItemID_WINACECOIN       EItemID = 10101004
	EItemID_CREDIT           EItemID = 10101005
	EItemID_GUILDGOLD        EItemID = 10101006
	EItemID_GUILDEXP         EItemID = 10101007
	EItemID_LIVENESS         EItemID = 10101008
	EItemID_ACECOIN          EItemID = 10101009
	EItemID_CHANGE_NAME_CARD EItemID = 20101001
)

// Enum value maps for EItemID.
var (
	EItemID_name = map[int32]string{
		0:        "_ITEM_ID_NONE",
		10101001: "EXP",
		10101002: "GOLD",
		10101003: "DIAMOND",
		10101004: "WINACECOIN",
		10101005: "CREDIT",
		10101006: "GUILDGOLD",
		10101007: "GUILDEXP",
		10101008: "LIVENESS",
		10101009: "ACECOIN",
		20101001: "CHANGE_NAME_CARD",
	}
	EItemID_value = map[string]int32{
		"_ITEM_ID_NONE":    0,
		"EXP":              10101001,
		"GOLD":             10101002,
		"DIAMOND":          10101003,
		"WINACECOIN":       10101004,
		"CREDIT":           10101005,
		"GUILDGOLD":        10101006,
		"GUILDEXP":         10101007,
		"LIVENESS":         10101008,
		"ACECOIN":          10101009,
		"CHANGE_NAME_CARD": 20101001,
	}
)

func (x EItemID) Enum() *EItemID {
	p := new(EItemID)
	*p = x
	return p
}

func (x EItemID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemID) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (EItemID) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x EItemID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemID.Descriptor instead.
func (EItemID) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type EItemType int32

const (
	EItemType__ITEM_TYPE_NONE EItemType = 0
	EItemType_DROP            EItemType = 9
)

// Enum value maps for EItemType.
var (
	EItemType_name = map[int32]string{
		0: "_ITEM_TYPE_NONE",
		9: "DROP",
	}
	EItemType_value = map[string]int32{
		"_ITEM_TYPE_NONE": 0,
		"DROP":            9,
	}
)

func (x EItemType) Enum() *EItemType {
	p := new(EItemType)
	*p = x
	return p
}

func (x EItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (EItemType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x EItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemType.Descriptor instead.
func (EItemType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

// 道具掉落方式
type EItemDropWay int32

const (
	EItemDropWay__ITEM_DROP_WAY_NONE EItemDropWay = 0
	EItemDropWay_CERTAIN             EItemDropWay = 1
	EItemDropWay_PROBABILITY         EItemDropWay = 2
	EItemDropWay_WEIGHT              EItemDropWay = 3
)

// Enum value maps for EItemDropWay.
var (
	EItemDropWay_name = map[int32]string{
		0: "_ITEM_DROP_WAY_NONE",
		1: "CERTAIN",
		2: "PROBABILITY",
		3: "WEIGHT",
	}
	EItemDropWay_value = map[string]int32{
		"_ITEM_DROP_WAY_NONE": 0,
		"CERTAIN":             1,
		"PROBABILITY":         2,
		"WEIGHT":              3,
	}
)

func (x EItemDropWay) Enum() *EItemDropWay {
	p := new(EItemDropWay)
	*p = x
	return p
}

func (x EItemDropWay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemDropWay) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (EItemDropWay) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x EItemDropWay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemDropWay.Descriptor instead.
func (EItemDropWay) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

// 道具类型
type EItemMainType int32

const (
	EItemMainType__ITEM_MAIN_TYPE_NONE EItemMainType = 0
	EItemMainType_ICON                 EItemMainType = 701
	EItemMainType_HERO_CARD            EItemMainType = 401
	EItemMainType_EQUIP                EItemMainType = 501
	EItemMainType_ARTIFACT             EItemMainType = 601
	EItemMainType_PACKAGE              EItemMainType = 901
)

// Enum value maps for EItemMainType.
var (
	EItemMainType_name = map[int32]string{
		0:   "_ITEM_MAIN_TYPE_NONE",
		701: "ICON",
		401: "HERO_CARD",
		501: "EQUIP",
		601: "ARTIFACT",
		901: "PACKAGE",
	}
	EItemMainType_value = map[string]int32{
		"_ITEM_MAIN_TYPE_NONE": 0,
		"ICON":                 701,
		"HERO_CARD":            401,
		"EQUIP":                501,
		"ARTIFACT":             601,
		"PACKAGE":              901,
	}
)

func (x EItemMainType) Enum() *EItemMainType {
	p := new(EItemMainType)
	*p = x
	return p
}

func (x EItemMainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemMainType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (EItemMainType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x EItemMainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemMainType.Descriptor instead.
func (EItemMainType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type EItemSubType int32

const (
	EItemSubType__ITEM_SUB_TYPE_NONE EItemSubType = 0
	EItemSubType_ICON_ICON           EItemSubType = 70101
	EItemSubType_ICON_FRAME          EItemSubType = 70102
)

// Enum value maps for EItemSubType.
var (
	EItemSubType_name = map[int32]string{
		0:     "_ITEM_SUB_TYPE_NONE",
		70101: "ICON_ICON",
		70102: "ICON_FRAME",
	}
	EItemSubType_value = map[string]int32{
		"_ITEM_SUB_TYPE_NONE": 0,
		"ICON_ICON":           70101,
		"ICON_FRAME":          70102,
	}
)

func (x EItemSubType) Enum() *EItemSubType {
	p := new(EItemSubType)
	*p = x
	return p
}

func (x EItemSubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemSubType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (EItemSubType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x EItemSubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemSubType.Descriptor instead.
func (EItemSubType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

// 红点系统枚举
type ERedPointSystem int32

const (
	ERedPointSystem__RED_POINT_SYSTEM_NONE ERedPointSystem = 0
	ERedPointSystem_RED_POINT_ICON         ERedPointSystem = 1
	ERedPointSystem_RED_POINT_FRAME        ERedPointSystem = 2
	ERedPointSystem_RED_POINT_CARD         ERedPointSystem = 3
	ERedPointSystem_RED_POINT_ACHIEVEMENT  ERedPointSystem = 4
)

// Enum value maps for ERedPointSystem.
var (
	ERedPointSystem_name = map[int32]string{
		0: "_RED_POINT_SYSTEM_NONE",
		1: "RED_POINT_ICON",
		2: "RED_POINT_FRAME",
		3: "RED_POINT_CARD",
		4: "RED_POINT_ACHIEVEMENT",
	}
	ERedPointSystem_value = map[string]int32{
		"_RED_POINT_SYSTEM_NONE": 0,
		"RED_POINT_ICON":         1,
		"RED_POINT_FRAME":        2,
		"RED_POINT_CARD":         3,
		"RED_POINT_ACHIEVEMENT":  4,
	}
)

func (x ERedPointSystem) Enum() *ERedPointSystem {
	p := new(ERedPointSystem)
	*p = x
	return p
}

func (x ERedPointSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERedPointSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (ERedPointSystem) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x ERedPointSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERedPointSystem.Descriptor instead.
func (ERedPointSystem) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type MailType int32

const (
	MailType__MAIL_TYPE_NONE           MailType = 0
	MailType_MAIL_TYPE_SYSTEM          MailType = 1
	MailType_MAIL_TYPE_SYSTEM_TEMPLATE MailType = 2
	MailType_MAIL_TYPE_USER            MailType = 3
)

// Enum value maps for MailType.
var (
	MailType_name = map[int32]string{
		0: "_MAIL_TYPE_NONE",
		1: "MAIL_TYPE_SYSTEM",
		2: "MAIL_TYPE_SYSTEM_TEMPLATE",
		3: "MAIL_TYPE_USER",
	}
	MailType_value = map[string]int32{
		"_MAIL_TYPE_NONE":           0,
		"MAIL_TYPE_SYSTEM":          1,
		"MAIL_TYPE_SYSTEM_TEMPLATE": 2,
		"MAIL_TYPE_USER":            3,
	}
)

func (x MailType) Enum() *MailType {
	p := new(MailType)
	*p = x
	return p
}

func (x MailType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MailType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (MailType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x MailType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MailType.Descriptor instead.
func (MailType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

// 聊天频道
type ChatChannel int32

const (
	ChatChannel__CHAT_CHANNEL_NONE  ChatChannel = 0
	ChatChannel_CHAT_CHANNEL_HALL   ChatChannel = 1 // 综合
	ChatChannel_CHAT_CHANNEL_GUILD  ChatChannel = 2 // 公会
	ChatChannel_CHAT_CHANNEL_FRIEND ChatChannel = 3 // 好友
)

// Enum value maps for ChatChannel.
var (
	ChatChannel_name = map[int32]string{
		0: "_CHAT_CHANNEL_NONE",
		1: "CHAT_CHANNEL_HALL",
		2: "CHAT_CHANNEL_GUILD",
		3: "CHAT_CHANNEL_FRIEND",
	}
	ChatChannel_value = map[string]int32{
		"_CHAT_CHANNEL_NONE":  0,
		"CHAT_CHANNEL_HALL":   1,
		"CHAT_CHANNEL_GUILD":  2,
		"CHAT_CHANNEL_FRIEND": 3,
	}
)

func (x ChatChannel) Enum() *ChatChannel {
	p := new(ChatChannel)
	*p = x
	return p
}

func (x ChatChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (ChatChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x ChatChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatChannel.Descriptor instead.
func (ChatChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

// 任务更新方法
type TaskCountType int32

const (
	TaskCountType__TASK_COUNT_TYPE_NONE TaskCountType = 0
	TaskCountType_TASK_COUNT_TYPE_ADD   TaskCountType = 1 // 累加
	TaskCountType_TASK_COUNT_TYPE_MAX   TaskCountType = 2 // 更新最大值
)

// Enum value maps for TaskCountType.
var (
	TaskCountType_name = map[int32]string{
		0: "_TASK_COUNT_TYPE_NONE",
		1: "TASK_COUNT_TYPE_ADD",
		2: "TASK_COUNT_TYPE_MAX",
	}
	TaskCountType_value = map[string]int32{
		"_TASK_COUNT_TYPE_NONE": 0,
		"TASK_COUNT_TYPE_ADD":   1,
		"TASK_COUNT_TYPE_MAX":   2,
	}
)

func (x TaskCountType) Enum() *TaskCountType {
	p := new(TaskCountType)
	*p = x
	return p
}

func (x TaskCountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskCountType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (TaskCountType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x TaskCountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskCountType.Descriptor instead.
func (TaskCountType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

type TaskName int32

const (
	TaskName__TASK_NAME_NONE       TaskName = 0
	TaskName_TASK_ROLE_LEVEL       TaskName = 1  //指挥官等级
	TaskName_TASK_PASS_INSTANCE    TaskName = 2  //通过制定关卡    1002;
	TaskName_TASK_USE_ITEM         TaskName = 3  //消耗物品
	TaskName_TASK_GENREAL_INSTANCE TaskName = 4  //普通副本次数
	TaskName_TASK_ELITE_INSTANCE   TaskName = 5  //精英副本次数
	TaskName_TASK_EVERYDAY_LOGIN   TaskName = 6  // 登录汇总
	TaskName_TASK_TODAY_LOGIN      TaskName = 7  // 当天登录标记
	TaskName_TASK_HERO_LEVEL       TaskName = 8  //英雄解锁
	TaskName_TASK_HERO_STAR        TaskName = 9  //英雄星级
	TaskName_TASK_HERO_QUALITY     TaskName = 10 //英雄品质
	TaskName_TASK_HERO_SKILL_LEVEL TaskName = 11 //英雄品质
)

// Enum value maps for TaskName.
var (
	TaskName_name = map[int32]string{
		0:  "_TASK_NAME_NONE",
		1:  "TASK_ROLE_LEVEL",
		2:  "TASK_PASS_INSTANCE",
		3:  "TASK_USE_ITEM",
		4:  "TASK_GENREAL_INSTANCE",
		5:  "TASK_ELITE_INSTANCE",
		6:  "TASK_EVERYDAY_LOGIN",
		7:  "TASK_TODAY_LOGIN",
		8:  "TASK_HERO_LEVEL",
		9:  "TASK_HERO_STAR",
		10: "TASK_HERO_QUALITY",
		11: "TASK_HERO_SKILL_LEVEL",
	}
	TaskName_value = map[string]int32{
		"_TASK_NAME_NONE":       0,
		"TASK_ROLE_LEVEL":       1,
		"TASK_PASS_INSTANCE":    2,
		"TASK_USE_ITEM":         3,
		"TASK_GENREAL_INSTANCE": 4,
		"TASK_ELITE_INSTANCE":   5,
		"TASK_EVERYDAY_LOGIN":   6,
		"TASK_TODAY_LOGIN":      7,
		"TASK_HERO_LEVEL":       8,
		"TASK_HERO_STAR":        9,
		"TASK_HERO_QUALITY":     10,
		"TASK_HERO_SKILL_LEVEL": 11,
	}
)

func (x TaskName) Enum() *TaskName {
	p := new(TaskName)
	*p = x
	return p
}

func (x TaskName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskName) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (TaskName) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x TaskName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskName.Descriptor instead.
func (TaskName) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

type ActvityTaskUpdateType int32

const (
	ActvityTaskUpdateType_AT_NULL_TYPE   ActvityTaskUpdateType = 0 // 默认
	ActvityTaskUpdateType_AT_UPDATE_TYPE ActvityTaskUpdateType = 1 // 更新
	ActvityTaskUpdateType_AT_DELETE_TYPE ActvityTaskUpdateType = 2 // 删除
)

// Enum value maps for ActvityTaskUpdateType.
var (
	ActvityTaskUpdateType_name = map[int32]string{
		0: "AT_NULL_TYPE",
		1: "AT_UPDATE_TYPE",
		2: "AT_DELETE_TYPE",
	}
	ActvityTaskUpdateType_value = map[string]int32{
		"AT_NULL_TYPE":   0,
		"AT_UPDATE_TYPE": 1,
		"AT_DELETE_TYPE": 2,
	}
)

func (x ActvityTaskUpdateType) Enum() *ActvityTaskUpdateType {
	p := new(ActvityTaskUpdateType)
	*p = x
	return p
}

func (x ActvityTaskUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActvityTaskUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (ActvityTaskUpdateType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x ActvityTaskUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActvityTaskUpdateType.Descriptor instead.
func (ActvityTaskUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

type ActvityTaskCompareType int32

const (
	ActvityTaskCompareType_C_NULL_TYPE          ActvityTaskCompareType = 0 // 默认 null
	ActvityTaskCompareType_EQUAL_TYPE           ActvityTaskCompareType = 1 // 等于
	ActvityTaskCompareType_BIG_AND_EQUAL_TYPE   ActvityTaskCompareType = 2 // 大等于
	ActvityTaskCompareType_SMALL_AND_EQUAL_TYPE ActvityTaskCompareType = 3 // 小等于
)

// Enum value maps for ActvityTaskCompareType.
var (
	ActvityTaskCompareType_name = map[int32]string{
		0: "C_NULL_TYPE",
		1: "EQUAL_TYPE",
		2: "BIG_AND_EQUAL_TYPE",
		3: "SMALL_AND_EQUAL_TYPE",
	}
	ActvityTaskCompareType_value = map[string]int32{
		"C_NULL_TYPE":          0,
		"EQUAL_TYPE":           1,
		"BIG_AND_EQUAL_TYPE":   2,
		"SMALL_AND_EQUAL_TYPE": 3,
	}
)

func (x ActvityTaskCompareType) Enum() *ActvityTaskCompareType {
	p := new(ActvityTaskCompareType)
	*p = x
	return p
}

func (x ActvityTaskCompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActvityTaskCompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (ActvityTaskCompareType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x ActvityTaskCompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActvityTaskCompareType.Descriptor instead.
func (ActvityTaskCompareType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

type ActvityTaskAwardType int32

const (
	ActvityTaskAwardType_A_NULL_TYPE    ActvityTaskAwardType = 0 // 默认 未完成无奖励
	ActvityTaskAwardType_UNCLAIMED_TYPE ActvityTaskAwardType = 1 // 有奖励未领取
	ActvityTaskAwardType_AUTO_TYPE      ActvityTaskAwardType = 2 // 直接已发放
	ActvityTaskAwardType_ALREADY_TYPE   ActvityTaskAwardType = 3 // 玩家已领取
)

// Enum value maps for ActvityTaskAwardType.
var (
	ActvityTaskAwardType_name = map[int32]string{
		0: "A_NULL_TYPE",
		1: "UNCLAIMED_TYPE",
		2: "AUTO_TYPE",
		3: "ALREADY_TYPE",
	}
	ActvityTaskAwardType_value = map[string]int32{
		"A_NULL_TYPE":    0,
		"UNCLAIMED_TYPE": 1,
		"AUTO_TYPE":      2,
		"ALREADY_TYPE":   3,
	}
)

func (x ActvityTaskAwardType) Enum() *ActvityTaskAwardType {
	p := new(ActvityTaskAwardType)
	*p = x
	return p
}

func (x ActvityTaskAwardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActvityTaskAwardType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (ActvityTaskAwardType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x ActvityTaskAwardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActvityTaskAwardType.Descriptor instead.
func (ActvityTaskAwardType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

type ActvityTaskReceiveType int32

const (
	ActvityTaskReceiveType_R_NULL_TYPE         ActvityTaskReceiveType = 0 // 默认 NULL
	ActvityTaskReceiveType_MANUAL_RECEIVE_TYPE ActvityTaskReceiveType = 1 // 手动发放
	ActvityTaskReceiveType_AUTO_RECEIVE_TYPE   ActvityTaskReceiveType = 2 // 自动发放
)

// Enum value maps for ActvityTaskReceiveType.
var (
	ActvityTaskReceiveType_name = map[int32]string{
		0: "R_NULL_TYPE",
		1: "MANUAL_RECEIVE_TYPE",
		2: "AUTO_RECEIVE_TYPE",
	}
	ActvityTaskReceiveType_value = map[string]int32{
		"R_NULL_TYPE":         0,
		"MANUAL_RECEIVE_TYPE": 1,
		"AUTO_RECEIVE_TYPE":   2,
	}
)

func (x ActvityTaskReceiveType) Enum() *ActvityTaskReceiveType {
	p := new(ActvityTaskReceiveType)
	*p = x
	return p
}

func (x ActvityTaskReceiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActvityTaskReceiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (ActvityTaskReceiveType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x ActvityTaskReceiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActvityTaskReceiveType.Descriptor instead.
func (ActvityTaskReceiveType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

type Reason int32

const (
	Reason_REASON_INIT                  Reason = 0    // 初始化
	Reason_REASON_LOGIN                 Reason = 1000 // 登录
	Reason_REASON_GM                    Reason = 1001 // GM命令
	Reason_REASON_CONSUME               Reason = 1002 // 消耗
	Reason_REASON_MALL_BUY              Reason = 1003 // 商城购买
	Reason_REASON_RENAME                Reason = 1011 // 改名
	Reason_REASON_MAIL_ATTACH           Reason = 1012 // 邮件附件
	Reason_REASON_COMPOSE               Reason = 1022 // 合成
	Reason_REASON_MALL_PACKAGE          Reason = 1031 // 商城礼包
	Reason_REASON_MALL_RECHARGE         Reason = 1032 // 充值
	Reason_REASON_MAIN_TASK_REWARD      Reason = 1035 // 主线任务奖励
	Reason_REASON_GIFT_EXCHANGE_SUCCESS Reason = 1040 // 礼包兑换成功
	Reason_REASON_CREATE_GUILD_SUCCESS  Reason = 1041 // 创建公会
	Reason_REASON_ACTVITY_TASK_REWARD   Reason = 1043 // 活动任务奖励
)

// Enum value maps for Reason.
var (
	Reason_name = map[int32]string{
		0:    "REASON_INIT",
		1000: "REASON_LOGIN",
		1001: "REASON_GM",
		1002: "REASON_CONSUME",
		1003: "REASON_MALL_BUY",
		1011: "REASON_RENAME",
		1012: "REASON_MAIL_ATTACH",
		1022: "REASON_COMPOSE",
		1031: "REASON_MALL_PACKAGE",
		1032: "REASON_MALL_RECHARGE",
		1035: "REASON_MAIN_TASK_REWARD",
		1040: "REASON_GIFT_EXCHANGE_SUCCESS",
		1041: "REASON_CREATE_GUILD_SUCCESS",
		1043: "REASON_ACTVITY_TASK_REWARD",
	}
	Reason_value = map[string]int32{
		"REASON_INIT":                  0,
		"REASON_LOGIN":                 1000,
		"REASON_GM":                    1001,
		"REASON_CONSUME":               1002,
		"REASON_MALL_BUY":              1003,
		"REASON_RENAME":                1011,
		"REASON_MAIL_ATTACH":           1012,
		"REASON_COMPOSE":               1022,
		"REASON_MALL_PACKAGE":          1031,
		"REASON_MALL_RECHARGE":         1032,
		"REASON_MAIN_TASK_REWARD":      1035,
		"REASON_GIFT_EXCHANGE_SUCCESS": 1040,
		"REASON_CREATE_GUILD_SUCCESS":  1041,
		"REASON_ACTVITY_TASK_REWARD":   1043,
	}
)

func (x Reason) Enum() *Reason {
	p := new(Reason)
	*p = x
	return p
}

func (x Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (Reason) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason.Descriptor instead.
func (Reason) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

// 每个回包都需要包含的返回值
type Ret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=g1.protocol.ErrorCode" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Argv []string  `protobuf:"bytes,3,rep,name=argv,proto3" json:"argv,omitempty"`
}

func (x *Ret) Reset() {
	*x = Ret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ret) ProtoMessage() {}

func (x *Ret) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ret.ProtoReflect.Descriptor instead.
func (*Ret) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Ret) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERR_SUCESS
}

func (x *Ret) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Ret) GetArgv() []string {
	if x != nil {
		return x.Argv
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x10, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a,
	0x03, 0x52, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x76, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x76, 0x2a, 0x92, 0x02, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x5f, 0x44, 0x42, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x52, 0x49, 0x45, 0x46, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x49, 0x4c, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10,
	0x0a, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x55, 0x4d,
	0x4d, 0x59, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x63, 0x2a, 0x4b, 0x0a, 0x0e, 0x45,
	0x4b, 0x69, 0x63, 0x6b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x98, 0x02, 0x0a, 0x10, 0x45, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a,
	0x16, 0x5f, 0x45, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x10, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x20,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x40, 0x12,
	0x13, 0x0a, 0x0e, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0x80, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x80, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x80, 0x04, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x80, 0x08, 0x12, 0x16, 0x0a, 0x11, 0x41,
	0x43, 0x54, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x10, 0x80, 0x10, 0x2a, 0xc4, 0x01, 0x0a, 0x07, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x11, 0x0a, 0x0d, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x03, 0x45, 0x58, 0x50, 0x10, 0x89, 0xc2, 0xe8, 0x04, 0x12, 0x0b,
	0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x8a, 0xc2, 0xe8, 0x04, 0x12, 0x0e, 0x0a, 0x07, 0x44,
	0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x10, 0x8b, 0xc2, 0xe8, 0x04, 0x12, 0x11, 0x0a, 0x0a, 0x57,
	0x49, 0x4e, 0x41, 0x43, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x8c, 0xc2, 0xe8, 0x04, 0x12, 0x0d,
	0x0a, 0x06, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x8d, 0xc2, 0xe8, 0x04, 0x12, 0x10, 0x0a,
	0x09, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x8e, 0xc2, 0xe8, 0x04, 0x12,
	0x0f, 0x0a, 0x08, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x45, 0x58, 0x50, 0x10, 0x8f, 0xc2, 0xe8, 0x04,
	0x12, 0x0f, 0x0a, 0x08, 0x4c, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x90, 0xc2, 0xe8,
	0x04, 0x12, 0x0e, 0x0a, 0x07, 0x41, 0x43, 0x45, 0x43, 0x4f, 0x49, 0x4e, 0x10, 0x91, 0xc2, 0xe8,
	0x04, 0x12, 0x17, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x89, 0xef, 0xca, 0x09, 0x2a, 0x2a, 0x0a, 0x09, 0x45, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x09, 0x2a, 0x51, 0x0a, 0x0c, 0x45, 0x49, 0x74, 0x65, 0x6d, 0x44,
	0x72, 0x6f, 0x70, 0x57, 0x61, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x57, 0x41, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x0d, 0x45, 0x49, 0x74,
	0x65, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0xbd, 0x05, 0x12,
	0x0e, 0x0a, 0x09, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x91, 0x03, 0x12,
	0x0a, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x49, 0x50, 0x10, 0xf5, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0xd9, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x85, 0x07, 0x2a, 0x4a, 0x0a, 0x0c, 0x45, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x09, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0xd5,
	0xa3, 0x04, 0x12, 0x10, 0x0a, 0x0a, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x10, 0xd6, 0xa3, 0x04, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x45, 0x52, 0x65, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x5f, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x44, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x41,
	0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x2a, 0x68, 0x0a, 0x08,
	0x4d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x5f, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x6d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x12, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x58, 0x10, 0x02, 0x2a, 0x9d, 0x02, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x45,
	0x4e, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x45, 0x56, 0x45, 0x52, 0x59, 0x44, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x08, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x10,
	0x09, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x0b, 0x2a, 0x51, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x76, 0x69, 0x74,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x49, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x4e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x03, 0x2a, 0x59, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x2a, 0xe2, 0x02, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0xe8, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x4d, 0x10, 0xe9, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x10, 0xea, 0x07,
	0x12, 0x14, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0xeb, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf3, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48,
	0x10, 0xf4, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x53, 0x45, 0x10, 0xfe, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10,
	0x87, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x4c,
	0x4c, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x88, 0x08, 0x12, 0x1c, 0x0a,
	0x17, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x8b, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x90, 0x08, 0x12, 0x20,
	0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x91, 0x08,
	0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x10, 0x93,
	0x08, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_proto_goTypes = []interface{}{
	(DBType)(0),                 // 0: g1.protocol.DBType
	(EKickOutReason)(0),         // 1: g1.protocol.EKickOutReason
	(ERoleSectionFlag)(0),       // 2: g1.protocol.ERoleSectionFlag
	(EItemID)(0),                // 3: g1.protocol.EItemID
	(EItemType)(0),              // 4: g1.protocol.EItemType
	(EItemDropWay)(0),           // 5: g1.protocol.EItemDropWay
	(EItemMainType)(0),          // 6: g1.protocol.EItemMainType
	(EItemSubType)(0),           // 7: g1.protocol.EItemSubType
	(ERedPointSystem)(0),        // 8: g1.protocol.ERedPointSystem
	(MailType)(0),               // 9: g1.protocol.MailType
	(ChatChannel)(0),            // 10: g1.protocol.ChatChannel
	(TaskCountType)(0),          // 11: g1.protocol.TaskCountType
	(TaskName)(0),               // 12: g1.protocol.TaskName
	(ActvityTaskUpdateType)(0),  // 13: g1.protocol.ActvityTaskUpdateType
	(ActvityTaskCompareType)(0), // 14: g1.protocol.ActvityTaskCompareType
	(ActvityTaskAwardType)(0),   // 15: g1.protocol.ActvityTaskAwardType
	(ActvityTaskReceiveType)(0), // 16: g1.protocol.ActvityTaskReceiveType
	(Reason)(0),                 // 17: g1.protocol.Reason
	(*Ret)(nil),                 // 18: g1.protocol.Ret
	(ErrorCode)(0),              // 19: g1.protocol.ErrorCode
}
var file_common_proto_depIdxs = []int32{
	19, // 0: g1.protocol.Ret.code:type_name -> g1.protocol.ErrorCode
	1,  // [1:1] is the sub-list for method output_type
	1,  // [1:1] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_error_code_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
