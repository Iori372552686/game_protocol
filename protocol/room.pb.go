// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: room.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TexasRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseInfo *RoomBaseInfo `protobuf:"bytes,1,opt,name=base_info,json=baseInfo,proto3" json:"base_info,omitempty"`
}

func (x *TexasRoomInfo) Reset() {
	*x = TexasRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasRoomInfo) ProtoMessage() {}

func (x *TexasRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasRoomInfo.ProtoReflect.Descriptor instead.
func (*TexasRoomInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{0}
}

func (x *TexasRoomInfo) GetBaseInfo() *RoomBaseInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

type RoomOwerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FigureUrl string   `protobuf:"bytes,1,opt,name=FigureUrl,proto3" json:"FigureUrl,omitempty"`
	Gender    string   `protobuf:"bytes,2,opt,name=Gender,proto3" json:"Gender,omitempty"`
	NickName  string   `protobuf:"bytes,3,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Sign      string   `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`               // 签名
	MaxNoble  int32    `protobuf:"varint,5,opt,name=MaxNoble,proto3" json:"MaxNoble,omitempty"`      // VIP等级
	WeChat    string   `protobuf:"bytes,6,opt,name=WeChat,proto3" json:"WeChat,omitempty"`           // 微信帐号
	ClubIds   []uint32 `protobuf:"varint,7,rep,packed,name=clubIds,proto3" json:"clubIds,omitempty"` // 加入的俱乐部id
}

func (x *RoomOwerInfo) Reset() {
	*x = RoomOwerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomOwerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomOwerInfo) ProtoMessage() {}

func (x *RoomOwerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomOwerInfo.ProtoReflect.Descriptor instead.
func (*RoomOwerInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{1}
}

func (x *RoomOwerInfo) GetFigureUrl() string {
	if x != nil {
		return x.FigureUrl
	}
	return ""
}

func (x *RoomOwerInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *RoomOwerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *RoomOwerInfo) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *RoomOwerInfo) GetMaxNoble() int32 {
	if x != nil {
		return x.MaxNoble
	}
	return 0
}

func (x *RoomOwerInfo) GetWeChat() string {
	if x != nil {
		return x.WeChat
	}
	return ""
}

func (x *RoomOwerInfo) GetClubIds() []uint32 {
	if x != nil {
		return x.ClubIds
	}
	return nil
}

type BuyingPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Playerid      uint32 `protobuf:"varint,1,opt,name=playerid,proto3" json:"playerid,omitempty"`
	NickName      string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	BuyingNum     uint32 `protobuf:"varint,3,opt,name=buyingNum,proto3" json:"buyingNum,omitempty"` // 买入数
	RoomId        uint32 `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	DwSurplusTime uint32 `protobuf:"varint,5,opt,name=dwSurplusTime,proto3" json:"dwSurplusTime,omitempty"`        // 买入审批剩余时间(秒)
	DwEndTime     uint32 `protobuf:"varint,6,opt,name=dwEndTime,proto3" json:"dwEndTime,omitempty"`                // 审批结束时间戳
	ClubId        uint32 `protobuf:"varint,7,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`        // 俱乐部id
	VerifyId      int32  `protobuf:"varint,10,opt,name=verify_id,json=verifyId,proto3" json:"verify_id,omitempty"` // 审批者
	FaceUrl       string `protobuf:"bytes,11,opt,name=face_url,json=faceUrl,proto3" json:"face_url,omitempty"`     // 头像
}

func (x *BuyingPlayerInfo) Reset() {
	*x = BuyingPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyingPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyingPlayerInfo) ProtoMessage() {}

func (x *BuyingPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyingPlayerInfo.ProtoReflect.Descriptor instead.
func (*BuyingPlayerInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{2}
}

func (x *BuyingPlayerInfo) GetPlayerid() uint32 {
	if x != nil {
		return x.Playerid
	}
	return 0
}

func (x *BuyingPlayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *BuyingPlayerInfo) GetBuyingNum() uint32 {
	if x != nil {
		return x.BuyingNum
	}
	return 0
}

func (x *BuyingPlayerInfo) GetRoomId() uint32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *BuyingPlayerInfo) GetDwSurplusTime() uint32 {
	if x != nil {
		return x.DwSurplusTime
	}
	return 0
}

func (x *BuyingPlayerInfo) GetDwEndTime() uint32 {
	if x != nil {
		return x.DwEndTime
	}
	return 0
}

func (x *BuyingPlayerInfo) GetClubId() uint32 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *BuyingPlayerInfo) GetVerifyId() int32 {
	if x != nil {
		return x.VerifyId
	}
	return 0
}

func (x *BuyingPlayerInfo) GetFaceUrl() string {
	if x != nil {
		return x.FaceUrl
	}
	return ""
}

type RoomBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // 游戏牌局id，落地存储唯一的id，结算绑定参与的所有玩家
	RoomId       uint64              `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`                                   // 房间id
	State        RoomState           `protobuf:"varint,3,opt,name=state,proto3,enum=g1.protocol.RoomState" json:"state,omitempty"`                        // 房间状态 //RoomState
	Name         string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                      // 房间名
	Pwd          string              `protobuf:"bytes,5,opt,name=pwd,proto3" json:"pwd,omitempty"`                                                        // 邀请码 or 密码
	GameId       GameTypeId          `protobuf:"varint,6,opt,name=game_id,json=gameId,proto3,enum=g1.protocol.GameTypeId" json:"game_id,omitempty"`       // 游戏id
	Stage        RoomStage           `protobuf:"varint,7,opt,name=stage,proto3,enum=g1.protocol.RoomStage" json:"stage,omitempty"`                        // RoomStage
	MaxMember    uint32              `protobuf:"varint,8,opt,name=max_member,json=maxMember,proto3" json:"max_member,omitempty"`                          // 房间里的人数
	MaxPlayer    uint32              `protobuf:"varint,9,opt,name=max_player,json=maxPlayer,proto3" json:"max_player,omitempty"`                          // 普通场椅子数 //SNG表示必须坐满开局的人数,MTT最大报名人数
	Zone         uint32              `protobuf:"varint,10,opt,name=zone,proto3" json:"zone,omitempty"`                                                    // 区服组
	IsPrivate    bool                `protobuf:"varint,11,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`                         // 是否私人局
	Blind        string              `protobuf:"bytes,12,opt,name=blind,proto3" json:"blind,omitempty"`                                                   // 小/大盲注 例如: 1/2 小盲1 大盲2 SNG表示报名费 1000/100  报名费/服务费
	Ante         uint32              `protobuf:"varint,13,opt,name=ante,proto3" json:"ante,omitempty"`                                                    // 前注,为0 或没有该字段表示没有前注
	GameTime     int64               `protobuf:"varint,14,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`                            // 总时间单位秒, /SNG表示涨盲时间
	IsAuth       bool                `protobuf:"varint,15,opt,name=is_auth,json=isAuth,proto3" json:"is_auth,omitempty"`                                  // 是否授权带入,sng授权报名
	StartBb      uint32              `protobuf:"varint,16,opt,name=start_bb,json=startBb,proto3" json:"start_bb,omitempty"`                               // 起始筹码
	StartTime    int64               `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                         // 开始时间
	OwerId       uint64              `protobuf:"varint,18,opt,name=ower_id,json=owerId,proto3" json:"ower_id,omitempty"`                                  // 房主uid
	IsRebuy      bool                `protobuf:"varint,19,opt,name=is_rebuy,json=isRebuy,proto3" json:"is_rebuy,omitempty"`                               // MTT 是否 rebuy
	IsAddon      bool                `protobuf:"varint,20,opt,name=is_addon,json=isAddon,proto3" json:"is_addon,omitempty"`                               // MTT 是否 Addon
	OwnerInfo    *PbIconDesc         `protobuf:"bytes,21,opt,name=owner_info,json=ownerInfo,proto3" json:"owner_info,omitempty"`                          // 创建者信息
	EndTime      int64               `protobuf:"varint,22,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                               // 游戏结束时间
	ClubId       uint32              `protobuf:"varint,23,opt,name=club_id,json=clubId,proto3" json:"club_id,omitempty"`                                  // 俱乐部id,非俱乐部成员不允许加入
	Competition  GameCompetitionType `protobuf:"varint,24,opt,name=competition,proto3,enum=g1.protocol.GameCompetitionType" json:"competition,omitempty"` // 比赛类型
	IsInsure     bool                `protobuf:"varint,25,opt,name=is_insure,json=isInsure,proto3" json:"is_insure,omitempty"`                            // 是否开启保险
	Straddle     int32               `protobuf:"varint,26,opt,name=straddle,proto3" json:"straddle,omitempty"`                                            // 是否Straddle
	IpLimit      bool                `protobuf:"varint,27,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty"`                               // 是否ip限制
	CoinType     CoinType            `protobuf:"varint,28,opt,name=coin_type,json=coinType,proto3,enum=g1.protocol.CoinType" json:"coin_type,omitempty"`  // 币种类型
	Allianceid   uint32              `protobuf:"varint,29,opt,name=allianceid,proto3" json:"allianceid,omitempty"`                                        // 联盟id
	GpsLimit     bool                `protobuf:"varint,30,opt,name=gps_limit,json=gpsLimit,proto3" json:"gps_limit,omitempty"`                            // Gps 限制
	CreateTime   int64               `protobuf:"varint,31,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                      // 创建时间
	MinBuyIn     int32               `protobuf:"varint,32,opt,name=MinBuyIn,proto3" json:"MinBuyIn,omitempty"`                                            // 最小买入
	MaxBuyIn     int32               `protobuf:"varint,33,opt,name=MaxBuyIn,proto3" json:"MaxBuyIn,omitempty"`                                            // 最大买入
	CurPlayerNum uint32              `protobuf:"varint,34,opt,name=cur_player_num,json=curPlayerNum,proto3" json:"cur_player_num,omitempty"`              // 当前玩家人数
}

func (x *RoomBaseInfo) Reset() {
	*x = RoomBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomBaseInfo) ProtoMessage() {}

func (x *RoomBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomBaseInfo.ProtoReflect.Descriptor instead.
func (*RoomBaseInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{3}
}

func (x *RoomBaseInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RoomBaseInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomBaseInfo) GetState() RoomState {
	if x != nil {
		return x.State
	}
	return RoomState_WAITSTART
}

func (x *RoomBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RoomBaseInfo) GetPwd() string {
	if x != nil {
		return x.Pwd
	}
	return ""
}

func (x *RoomBaseInfo) GetGameId() GameTypeId {
	if x != nil {
		return x.GameId
	}
	return GameTypeId_TEXAS_MODE_START
}

func (x *RoomBaseInfo) GetStage() RoomStage {
	if x != nil {
		return x.Stage
	}
	return RoomStage_Free
}

func (x *RoomBaseInfo) GetMaxMember() uint32 {
	if x != nil {
		return x.MaxMember
	}
	return 0
}

func (x *RoomBaseInfo) GetMaxPlayer() uint32 {
	if x != nil {
		return x.MaxPlayer
	}
	return 0
}

func (x *RoomBaseInfo) GetZone() uint32 {
	if x != nil {
		return x.Zone
	}
	return 0
}

func (x *RoomBaseInfo) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *RoomBaseInfo) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *RoomBaseInfo) GetAnte() uint32 {
	if x != nil {
		return x.Ante
	}
	return 0
}

func (x *RoomBaseInfo) GetGameTime() int64 {
	if x != nil {
		return x.GameTime
	}
	return 0
}

func (x *RoomBaseInfo) GetIsAuth() bool {
	if x != nil {
		return x.IsAuth
	}
	return false
}

func (x *RoomBaseInfo) GetStartBb() uint32 {
	if x != nil {
		return x.StartBb
	}
	return 0
}

func (x *RoomBaseInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RoomBaseInfo) GetOwerId() uint64 {
	if x != nil {
		return x.OwerId
	}
	return 0
}

func (x *RoomBaseInfo) GetIsRebuy() bool {
	if x != nil {
		return x.IsRebuy
	}
	return false
}

func (x *RoomBaseInfo) GetIsAddon() bool {
	if x != nil {
		return x.IsAddon
	}
	return false
}

func (x *RoomBaseInfo) GetOwnerInfo() *PbIconDesc {
	if x != nil {
		return x.OwnerInfo
	}
	return nil
}

func (x *RoomBaseInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *RoomBaseInfo) GetClubId() uint32 {
	if x != nil {
		return x.ClubId
	}
	return 0
}

func (x *RoomBaseInfo) GetCompetition() GameCompetitionType {
	if x != nil {
		return x.Competition
	}
	return GameCompetitionType_NORMAL
}

func (x *RoomBaseInfo) GetIsInsure() bool {
	if x != nil {
		return x.IsInsure
	}
	return false
}

func (x *RoomBaseInfo) GetStraddle() int32 {
	if x != nil {
		return x.Straddle
	}
	return 0
}

func (x *RoomBaseInfo) GetIpLimit() bool {
	if x != nil {
		return x.IpLimit
	}
	return false
}

func (x *RoomBaseInfo) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_COIN_NONE
}

func (x *RoomBaseInfo) GetAllianceid() uint32 {
	if x != nil {
		return x.Allianceid
	}
	return 0
}

func (x *RoomBaseInfo) GetGpsLimit() bool {
	if x != nil {
		return x.GpsLimit
	}
	return false
}

func (x *RoomBaseInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *RoomBaseInfo) GetMinBuyIn() int32 {
	if x != nil {
		return x.MinBuyIn
	}
	return 0
}

func (x *RoomBaseInfo) GetMaxBuyIn() int32 {
	if x != nil {
		return x.MaxBuyIn
	}
	return 0
}

func (x *RoomBaseInfo) GetCurPlayerNum() uint32 {
	if x != nil {
		return x.CurPlayerNum
	}
	return 0
}

// 大厅房间展示信息
// ROOM_CENTER_INNER_UPDATE_ROOM_INFO_REQ
type RoomShowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId uint64        `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Base   *RoomBaseInfo `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *RoomShowInfo) Reset() {
	*x = RoomShowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomShowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomShowInfo) ProtoMessage() {}

func (x *RoomShowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomShowInfo.ProtoReflect.Descriptor instead.
func (*RoomShowInfo) Descriptor() ([]byte, []int) {
	return file_room_proto_rawDescGZIP(), []int{4}
}

func (x *RoomShowInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *RoomShowInfo) GetBase() *RoomBaseInfo {
	if x != nil {
		return x.Base
	}
	return nil
}

var File_room_proto protoreflect.FileDescriptor

var file_room_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x61, 0x73, 0x52,
	0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xc2, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x4f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x75, 0x62, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x75,
	0x62, 0x49, 0x64, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x77, 0x53, 0x75,
	0x72, 0x70, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x64, 0x77, 0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x77, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x64, 0x77, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x6c, 0x75, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x22, 0xb9, 0x08,
	0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x77, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x61, 0x6e, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x62, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x62, 0x75, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x62, 0x75, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x62, 0x49, 0x63, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6c, 0x75, 0x62, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x69,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x70, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x67, 0x70, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d,
	0x69, 0x6e, 0x42, 0x75, 0x79, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x79, 0x49, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x79, 0x49, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0x56, 0x0a, 0x0c, 0x52, 0x6f, 0x6f,
	0x6d, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_room_proto_rawDescOnce sync.Once
	file_room_proto_rawDescData = file_room_proto_rawDesc
)

func file_room_proto_rawDescGZIP() []byte {
	file_room_proto_rawDescOnce.Do(func() {
		file_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_room_proto_rawDescData)
	})
	return file_room_proto_rawDescData
}

var file_room_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_room_proto_goTypes = []interface{}{
	(*TexasRoomInfo)(nil),    // 0: g1.protocol.TexasRoomInfo
	(*RoomOwerInfo)(nil),     // 1: g1.protocol.RoomOwerInfo
	(*BuyingPlayerInfo)(nil), // 2: g1.protocol.BuyingPlayerInfo
	(*RoomBaseInfo)(nil),     // 3: g1.protocol.RoomBaseInfo
	(*RoomShowInfo)(nil),     // 4: g1.protocol.RoomShowInfo
	(RoomState)(0),           // 5: g1.protocol.RoomState
	(GameTypeId)(0),          // 6: g1.protocol.GameTypeId
	(RoomStage)(0),           // 7: g1.protocol.RoomStage
	(*PbIconDesc)(nil),       // 8: g1.protocol.PbIconDesc
	(GameCompetitionType)(0), // 9: g1.protocol.GameCompetitionType
	(CoinType)(0),            // 10: g1.protocol.CoinType
}
var file_room_proto_depIdxs = []int32{
	3,  // 0: g1.protocol.TexasRoomInfo.base_info:type_name -> g1.protocol.RoomBaseInfo
	5,  // 1: g1.protocol.RoomBaseInfo.state:type_name -> g1.protocol.RoomState
	6,  // 2: g1.protocol.RoomBaseInfo.game_id:type_name -> g1.protocol.GameTypeId
	7,  // 3: g1.protocol.RoomBaseInfo.stage:type_name -> g1.protocol.RoomStage
	8,  // 4: g1.protocol.RoomBaseInfo.owner_info:type_name -> g1.protocol.PbIconDesc
	9,  // 5: g1.protocol.RoomBaseInfo.competition:type_name -> g1.protocol.GameCompetitionType
	10, // 6: g1.protocol.RoomBaseInfo.coin_type:type_name -> g1.protocol.CoinType
	3,  // 7: g1.protocol.RoomShowInfo.base:type_name -> g1.protocol.RoomBaseInfo
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_room_proto_init() }
func file_room_proto_init() {
	if File_room_proto != nil {
		return
	}
	file_game_enum_proto_init()
	file_role_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomOwerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyingPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomShowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_room_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_room_proto_goTypes,
		DependencyIndexes: file_room_proto_depIdxs,
		MessageInfos:      file_room_proto_msgTypes,
	}.Build()
	File_room_proto = out.File
	file_room_proto_rawDesc = nil
	file_room_proto_goTypes = nil
	file_room_proto_depIdxs = nil
}
