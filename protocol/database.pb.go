// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: database.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 角色信息
type MysqlRoleInfo struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	Uid  uint64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" xorm:"bigint pk comment('玩家uid')"`          // @inject_tag: xorm:"bigint pk comment('玩家uid')"
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" xorm:"varchar(25) index comment('玩家uid')"` // @inject_tag: xorm:"varchar(25) index comment('玩家uid')"
}

func (x *MysqlRoleInfo) Reset() {
	*x = MysqlRoleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlRoleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlRoleInfo) ProtoMessage() {}

func (x *MysqlRoleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlRoleInfo.ProtoReflect.Descriptor instead.
func (*MysqlRoleInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{0}
}

func (x *MysqlRoleInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MysqlRoleInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 房间数据
type MysqlTexasRoomInfo struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	Id                uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk"`                                                                          // @inject_tag: xorm:"bigint autoincr pk"
	RoomId            uint64     `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index notnull comment('房间id')"`                                  // @inject_tag: xorm:"bigint index notnull comment('房间id')"
	RoomName          string     `protobuf:"bytes,3,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty" xorm:"varchar(64) comment('房间名称')"`                                      // @inject_tag: xorm:"varchar(64) comment('房间名称')"
	GameType          GameTypeId `protobuf:"varint,4,opt,name=game_type,json=gameType,proto3,enum=g1.protocol.GameTypeId" json:"game_type,omitempty" xorm:"int index notnull comment('房间模式')"`   // @inject_tag: xorm:"int index notnull comment('房间模式')"
	RoomStage         RoomStage  `protobuf:"varint,5,opt,name=room_stage,json=roomStage,proto3,enum=g1.protocol.RoomStage" json:"room_stage,omitempty" xorm:"int index notnull comment('房间阶段')"` // @inject_tag: xorm:"int index notnull comment('房间阶段')"
	Blind             string     `protobuf:"bytes,6,opt,name=blind,proto3" json:"blind,omitempty" xorm:"varchar(30) index notnull comment('小/大盲注')"`                                             // @inject_tag: xorm:"varchar(30) index notnull comment('小/大盲注')"
	CreateTime        int64      `protobuf:"varint,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty" xorm:"bigint index notnull comment('创建房间时间')"`                    // @inject_tag: xorm:"bigint index notnull comment('创建房间时间')"
	FinishTime        int64      `protobuf:"varint,8,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty" xorm:"bigint index comment('房间结束时间')"`                            // @inject_tag: xorm:"bigint index comment('房间结束时间')"
	TableId           uint64     `protobuf:"varint,9,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty" xorm:"bigint index comment('牌局id')"`                                       // @inject_tag: xorm:"bigint index comment('牌局id')"
	TotalRound        uint32     `protobuf:"varint,10,opt,name=total_round,json=totalRound,proto3" json:"total_round,omitempty" xorm:"bigint comment('游戏局数')"`                                   // @inject_tag: xorm:"bigint comment('游戏局数')"
	TotalBuyinChips   int64      `protobuf:"varint,11,opt,name=total_buyin_chips,json=totalBuyinChips,proto3" json:"total_buyin_chips,omitempty" xorm:"bigint comment('总带入筹码')"`                 // @inject_tag: xorm:"bigint comment('总带入筹码')"
	TotalJoinCount    uint32     `protobuf:"varint,12,opt,name=total_join_count,json=totalJoinCount,proto3" json:"total_join_count,omitempty" xorm:"int comment('总参与人数')"`                       // @inject_tag: xorm:"int comment('总参与人数')"
	TotalServiceChips int64      `protobuf:"varint,13,opt,name=total_service_chips,json=totalServiceChips,proto3" json:"total_service_chips,omitempty" xorm:"bigint comment('总服务费')"`            // @inject_tag: xorm:"bigint comment('总服务费')"
	TotalRuningWater  int64      `protobuf:"varint,14,opt,name=total_runing_water,json=totalRuningWater,proto3" json:"total_runing_water,omitempty" xorm:"bigint comment('总流水')"`                // @inject_tag: xorm:"bigint comment('总流水')"
	UpdateTime        int64      `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" xorm:"bigint comment('更新时间')"`                                   // @inject_tag: xorm:"bigint comment('更新时间')"
}

func (x *MysqlTexasRoomInfo) Reset() {
	*x = MysqlTexasRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlTexasRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTexasRoomInfo) ProtoMessage() {}

func (x *MysqlTexasRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTexasRoomInfo.ProtoReflect.Descriptor instead.
func (*MysqlTexasRoomInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{1}
}

func (x *MysqlTexasRoomInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *MysqlTexasRoomInfo) GetGameType() GameTypeId {
	if x != nil {
		return x.GameType
	}
	return GameTypeId_TEXAS_MODE_START
}

func (x *MysqlTexasRoomInfo) GetRoomStage() RoomStage {
	if x != nil {
		return x.RoomStage
	}
	return RoomStage_Free
}

func (x *MysqlTexasRoomInfo) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *MysqlTexasRoomInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTotalRound() uint32 {
	if x != nil {
		return x.TotalRound
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTotalBuyinChips() int64 {
	if x != nil {
		return x.TotalBuyinChips
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTotalJoinCount() uint32 {
	if x != nil {
		return x.TotalJoinCount
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTotalServiceChips() int64 {
	if x != nil {
		return x.TotalServiceChips
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetTotalRuningWater() int64 {
	if x != nil {
		return x.TotalRuningWater
	}
	return 0
}

func (x *MysqlTexasRoomInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 玩家游戏数据
type MysqlTexasPlayerInfo struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	Id           uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" xorm:"bigint autoincr pk"`                                                                  // @inject_tag: xorm:"bigint autoincr pk"
	Uid          uint64     `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" xorm:"bigint index comment('玩家uid')"`                                                     // @inject_tag: xorm:"bigint index comment('玩家uid')"
	TableId      uint64     `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty" xorm:"bigint index comment('牌桌id')"`                               // @inject_tag: xorm:"bigint index comment('牌桌id')"
	Round        uint32     `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty" xorm:"int index comment('第几轮')"`                                                      // @inject_tag: xorm:"int index comment('第几轮')"
	TotalPlayers uint32     `protobuf:"varint,5,opt,name=total_players,json=totalPlayers,proto3" json:"total_players,omitempty" xorm:"int comment('总玩家数')"`                         // @inject_tag: xorm:"int comment('总玩家数')"
	GameType     GameTypeId `protobuf:"varint,6,opt,name=game_type,json=gameType,proto3,enum=g1.protocol.GameTypeId" json:"game_type,omitempty" xorm:"int index comment('房间模式')"`   // @inject_tag: xorm:"int index comment('房间模式')"
	RoomId       uint64     `protobuf:"varint,7,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index comment('房间id')"`                                  // @inject_tag: xorm:"bigint index comment('房间id')"
	RoomName     string     `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty" xorm:"varchar(64) comment('房间名称')"`                              // @inject_tag: xorm:"varchar(64) comment('房间名称')"
	RoomStage    RoomStage  `protobuf:"varint,9,opt,name=room_stage,json=roomStage,proto3,enum=g1.protocol.RoomStage" json:"room_stage,omitempty" xorm:"int index comment('房间阶段')"` // @inject_tag: xorm:"int index comment('房间阶段')"
	BeginTime    int64      `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty" xorm:"bigint index comment('开始时间')"`                        // @inject_tag: xorm:"bigint index comment('开始时间')"
	EndTime      int64      `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" xorm:"bigint index comment('结束时间')"`                              // @inject_tag: xorm:"bigint index comment('结束时间')"
	Chips        int64      `protobuf:"varint,12,opt,name=chips,proto3" json:"chips,omitempty" xorm:"bigint comment('当前筹码')"`                                                       // @inject_tag: xorm:"bigint comment('当前筹码')"
	ServiceChips int64      `protobuf:"varint,13,opt,name=service_chips,json=serviceChips,proto3" json:"service_chips,omitempty" xorm:"bigint comment('服务费')"`                      // @inject_tag: xorm:"bigint comment('服务费')"
	WinChips     int64      `protobuf:"varint,14,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty" xorm:"bigint comment('输赢')"`                                   // @inject_tag: xorm:"bigint comment('输赢')"
	UpdateTime   int64      `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" xorm:"bigint comment('更新时间')"`                           // @inject_tag: xorm:"bigint comment('更新时间')"
}

func (x *MysqlTexasPlayerInfo) Reset() {
	*x = MysqlTexasPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlTexasPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTexasPlayerInfo) ProtoMessage() {}

func (x *MysqlTexasPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTexasPlayerInfo.ProtoReflect.Descriptor instead.
func (*MysqlTexasPlayerInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{2}
}

func (x *MysqlTexasPlayerInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetTotalPlayers() uint32 {
	if x != nil {
		return x.TotalPlayers
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetGameType() GameTypeId {
	if x != nil {
		return x.GameType
	}
	return GameTypeId_TEXAS_MODE_START
}

func (x *MysqlTexasPlayerInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *MysqlTexasPlayerInfo) GetRoomStage() RoomStage {
	if x != nil {
		return x.RoomStage
	}
	return RoomStage_Free
}

func (x *MysqlTexasPlayerInfo) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetServiceChips() int64 {
	if x != nil {
		return x.ServiceChips
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *MysqlTexasPlayerInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 游戏牌桌数据
type MysqlTexasGameInfo struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	GameId       string     `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty" xorm:"varchar(125) pk comment('游戏id')"`                                // @inject_tag: xorm:"varchar(125) pk comment('游戏id')"
	TableId      uint64     `protobuf:"varint,3,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty" xorm:"bigint index comment('牌局id')"`                               // @inject_tag: xorm:"bigint index comment('牌局id')"
	Round        uint32     `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty" xorm:"int comment('当前回合')"`                                                           // @inject_tag: xorm:"int comment('当前回合')"
	GameType     GameTypeId `protobuf:"varint,5,opt,name=game_type,json=gameType,proto3,enum=g1.protocol.GameTypeId" json:"game_type,omitempty" xorm:"int index comment('房间模式')"`   // @inject_tag: xorm:"int index comment('房间模式')"
	RoomId       uint64     `protobuf:"varint,6,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" xorm:"bigint index comment('房间id')"`                                  // @inject_tag: xorm:"bigint index comment('房间id')"
	RoomName     string     `protobuf:"bytes,7,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty" xorm:"varchar(64) comment('房间名称')"`                              // @inject_tag: xorm:"varchar(64) comment('房间名称')"
	RoomStage    RoomStage  `protobuf:"varint,8,opt,name=room_stage,json=roomStage,proto3,enum=g1.protocol.RoomStage" json:"room_stage,omitempty" xorm:"int index comment('房间阶段')"` // @inject_tag: xorm:"int index comment('房间阶段')"
	Blind        string     `protobuf:"bytes,9,opt,name=blind,proto3" json:"blind,omitempty" xorm:"varchar(30) index comment('小/大盲注')"`                                             // @inject_tag: xorm:"varchar(30) index comment('小/大盲注')"
	BeginTime    int64      `protobuf:"varint,10,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty" xorm:"bigint index comment('创建房间时间')"`                      // @inject_tag: xorm:"bigint index comment('创建房间时间')"
	EndTime      int64      `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" xorm:"bigint index comment('房间结束时间')"`                            // @inject_tag: xorm:"bigint index comment('房间结束时间')"
	TotalPot     int64      `protobuf:"varint,12,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty" xorm:"bigint comment('底池')"`                                   // @inject_tag: xorm:"bigint comment('底池')"
	TotalService int64      `protobuf:"varint,13,opt,name=total_service,json=totalService,proto3" json:"total_service,omitempty" xorm:"bigint comment('玩家服务费')"`                    // @inject_tag: xorm:"bigint comment('玩家服务费')"
	GameDetail   []byte     `protobuf:"bytes,14,opt,name=game_detail,json=gameDetail,proto3" json:"game_detail,omitempty" xorm:"blob comment('游戏记录详情')"`                            // @inject_tag: xorm:"blob comment('游戏记录详情')"
	UpdateTime   int64      `protobuf:"varint,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" xorm:"bigint comment('更新时间')"`                           // @inject_tag: xorm:"bigint comment('更新时间')"
}

func (x *MysqlTexasGameInfo) Reset() {
	*x = MysqlTexasGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MysqlTexasGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MysqlTexasGameInfo) ProtoMessage() {}

func (x *MysqlTexasGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MysqlTexasGameInfo.ProtoReflect.Descriptor instead.
func (*MysqlTexasGameInfo) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{3}
}

func (x *MysqlTexasGameInfo) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MysqlTexasGameInfo) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetGameType() GameTypeId {
	if x != nil {
		return x.GameType
	}
	return GameTypeId_TEXAS_MODE_START
}

func (x *MysqlTexasGameInfo) GetRoomId() uint64 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *MysqlTexasGameInfo) GetRoomStage() RoomStage {
	if x != nil {
		return x.RoomStage
	}
	return RoomStage_Free
}

func (x *MysqlTexasGameInfo) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *MysqlTexasGameInfo) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetTotalService() int64 {
	if x != nil {
		return x.TotalService
	}
	return 0
}

func (x *MysqlTexasGameInfo) GetGameDetail() []byte {
	if x != nil {
		return x.GameDetail
	}
	return nil
}

func (x *MysqlTexasGameInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 游戏房间回合
type TexasGameRecord struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	TableId      uint64                 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                                  // 牌局id(唯一)
	GameType     GameTypeId             `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=g1.protocol.GameTypeId" json:"game_type,omitempty"`   // 游戏类型
	RoomStage    RoomStage              `protobuf:"varint,3,opt,name=room_stage,json=roomStage,proto3,enum=g1.protocol.RoomStage" json:"room_stage,omitempty"` // 房间阶段
	Blind        string                 `protobuf:"bytes,4,opt,name=blind,proto3" json:"blind,omitempty"`                                                      // 小/大盲注
	BeginTime    int64                  `protobuf:"varint,5,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`                            // 开始时间
	EndTime      int64                  `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                  // 结束时间
	TotalPot     int64                  `protobuf:"varint,7,opt,name=total_pot,json=totalPot,proto3" json:"total_pot,omitempty"`                               // 底池
	TotalService int64                  `protobuf:"varint,8,opt,name=total_service,json=totalService,proto3" json:"total_service,omitempty"`                   // 玩家服务费
	Round        uint32                 `protobuf:"varint,9,opt,name=round,proto3" json:"round,omitempty"`                                                     // 当前回合
	Detail       *TexasGameRecordDetail `protobuf:"bytes,10,opt,name=detail,proto3" json:"detail,omitempty"`                                                   // 游戏详细数据
}

func (x *TexasGameRecord) Reset() {
	*x = TexasGameRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGameRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameRecord) ProtoMessage() {}

func (x *TexasGameRecord) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameRecord.ProtoReflect.Descriptor instead.
func (*TexasGameRecord) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{4}
}

func (x *TexasGameRecord) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *TexasGameRecord) GetGameType() GameTypeId {
	if x != nil {
		return x.GameType
	}
	return GameTypeId_TEXAS_MODE_START
}

func (x *TexasGameRecord) GetRoomStage() RoomStage {
	if x != nil {
		return x.RoomStage
	}
	return RoomStage_Free
}

func (x *TexasGameRecord) GetBlind() string {
	if x != nil {
		return x.Blind
	}
	return ""
}

func (x *TexasGameRecord) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *TexasGameRecord) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TexasGameRecord) GetTotalPot() int64 {
	if x != nil {
		return x.TotalPot
	}
	return 0
}

func (x *TexasGameRecord) GetTotalService() int64 {
	if x != nil {
		return x.TotalService
	}
	return 0
}

func (x *TexasGameRecord) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *TexasGameRecord) GetDetail() *TexasGameRecordDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type TexasGameRecordDetail struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	DealList    []*TexasGamePokerDealRecord `protobuf:"bytes,1,rep,name=deal_list,json=dealList,proto3" json:"deal_list,omitempty"`          // 发牌记录
	PlayerList  []*TexasGamePlayerRecord    `protobuf:"bytes,2,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"`    // 玩家列表
	OperateList []*TexasGameOperateRecord   `protobuf:"bytes,3,rep,name=operate_list,json=operateList,proto3" json:"operate_list,omitempty"` // 玩家操作记录
}

func (x *TexasGameRecordDetail) Reset() {
	*x = TexasGameRecordDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGameRecordDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameRecordDetail) ProtoMessage() {}

func (x *TexasGameRecordDetail) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameRecordDetail.ProtoReflect.Descriptor instead.
func (*TexasGameRecordDetail) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{5}
}

func (x *TexasGameRecordDetail) GetDealList() []*TexasGamePokerDealRecord {
	if x != nil {
		return x.DealList
	}
	return nil
}

func (x *TexasGameRecordDetail) GetPlayerList() []*TexasGamePlayerRecord {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

func (x *TexasGameRecordDetail) GetOperateList() []*TexasGameOperateRecord {
	if x != nil {
		return x.OperateList
	}
	return nil
}

type TexasGamePokerDealRecord struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	DealType DealType `protobuf:"varint,1,opt,name=deal_type,json=dealType,proto3,enum=g1.protocol.DealType" json:"deal_type,omitempty"`
	Uid      uint64   `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Card     uint32   `protobuf:"varint,3,opt,name=card,proto3" json:"card,omitempty"`
	Cursor   uint32   `protobuf:"varint,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *TexasGamePokerDealRecord) Reset() {
	*x = TexasGamePokerDealRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGamePokerDealRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePokerDealRecord) ProtoMessage() {}

func (x *TexasGamePokerDealRecord) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePokerDealRecord.ProtoReflect.Descriptor instead.
func (*TexasGamePokerDealRecord) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{6}
}

func (x *TexasGamePokerDealRecord) GetDealType() DealType {
	if x != nil {
		return x.DealType
	}
	return DealType_DEAL_NONE
}

func (x *TexasGamePokerDealRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGamePokerDealRecord) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *TexasGamePokerDealRecord) GetCursor() uint32 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type TexasGamePlayerRecord struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	Uid          uint64   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	ChairId      uint32   `protobuf:"varint,2,opt,name=chair_id,json=chairId,proto3" json:"chair_id,omitempty"`                              // 玩家座位号
	Chips        int64    `protobuf:"varint,3,opt,name=chips,proto3" json:"chips,omitempty"`                                                 // 玩家筹码
	WinChips     int64    `protobuf:"varint,4,opt,name=win_chips,json=winChips,proto3" json:"win_chips,omitempty"`                           // 玩家赢得筹码
	CardType     CardType `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3,enum=g1.protocol.CardType" json:"card_type,omitempty"` // 玩家牌型
	HandCardList []uint32 `protobuf:"varint,6,rep,packed,name=hand_card_list,json=handCardList,proto3" json:"hand_card_list,omitempty"`      // 玩家手牌
	BestCardList []uint32 `protobuf:"varint,7,rep,packed,name=best_card_list,json=bestCardList,proto3" json:"best_card_list,omitempty"`      // 玩家最大牌
}

func (x *TexasGamePlayerRecord) Reset() {
	*x = TexasGamePlayerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGamePlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGamePlayerRecord) ProtoMessage() {}

func (x *TexasGamePlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGamePlayerRecord.ProtoReflect.Descriptor instead.
func (*TexasGamePlayerRecord) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{7}
}

func (x *TexasGamePlayerRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetChairId() uint32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetChips() int64 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetWinChips() int64 {
	if x != nil {
		return x.WinChips
	}
	return 0
}

func (x *TexasGamePlayerRecord) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_CARD_TYPE_NONE
}

func (x *TexasGamePlayerRecord) GetHandCardList() []uint32 {
	if x != nil {
		return x.HandCardList
	}
	return nil
}

func (x *TexasGamePlayerRecord) GetBestCardList() []uint32 {
	if x != nil {
		return x.BestCardList
	}
	return nil
}

type TexasGameOperateRecord struct {
	state         protoimpl.MessageState  `xorm:"-"`
	sizeCache     protoimpl.SizeCache     `xorm:"-"`
	unknownFields protoimpl.UnknownFields `xorm:"-"`

	GameState GameState   `protobuf:"varint,1,opt,name=game_state,json=gameState,proto3,enum=g1.protocol.GameState" json:"game_state,omitempty"` // 游戏状态
	Uid       uint64      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                                                         // 玩家id
	Operate   OperateType `protobuf:"varint,3,opt,name=operate,proto3,enum=g1.protocol.OperateType" json:"operate,omitempty"`                    // 玩家操作
	BetChips  int64       `protobuf:"varint,4,opt,name=bet_chips,json=betChips,proto3" json:"bet_chips,omitempty"`                               // 玩家下注筹码
}

func (x *TexasGameOperateRecord) Reset() {
	*x = TexasGameOperateRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_database_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TexasGameOperateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TexasGameOperateRecord) ProtoMessage() {}

func (x *TexasGameOperateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_database_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TexasGameOperateRecord.ProtoReflect.Descriptor instead.
func (*TexasGameOperateRecord) Descriptor() ([]byte, []int) {
	return file_database_proto_rawDescGZIP(), []int{8}
}

func (x *TexasGameOperateRecord) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_STATE_INIT
}

func (x *TexasGameOperateRecord) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TexasGameOperateRecord) GetOperate() OperateType {
	if x != nil {
		return x.Operate
	}
	return OperateType_OPERATE_NONE
}

func (x *TexasGameOperateRecord) GetBetChips() int64 {
	if x != nil {
		return x.BetChips
	}
	return 0
}

var File_database_proto protoreflect.FileDescriptor

var file_database_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35,
	0x0a, 0x0d, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x12, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79,
	0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x79, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe4, 0x03, 0x0a, 0x14, 0x4d, 0x79, 0x73,
	0x71, 0x6c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd5, 0x03, 0x0a, 0x12, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xfd, 0x02, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x31, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe8, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61,
	0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x6b, 0x65,
	0x72, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x64, 0x65, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x32, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x62,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x16,
	0x54, 0x65, 0x78, 0x61, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x31, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x32, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x73,
	0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_database_proto_rawDescOnce sync.Once
	file_database_proto_rawDescData = file_database_proto_rawDesc
)

func file_database_proto_rawDescGZIP() []byte {
	file_database_proto_rawDescOnce.Do(func() {
		file_database_proto_rawDescData = protoimpl.X.CompressGZIP(file_database_proto_rawDescData)
	})
	return file_database_proto_rawDescData
}

var file_database_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_database_proto_goTypes = []interface{}{
	(*MysqlRoleInfo)(nil),            // 0: g1.protocol.MysqlRoleInfo
	(*MysqlTexasRoomInfo)(nil),       // 1: g1.protocol.MysqlTexasRoomInfo
	(*MysqlTexasPlayerInfo)(nil),     // 2: g1.protocol.MysqlTexasPlayerInfo
	(*MysqlTexasGameInfo)(nil),       // 3: g1.protocol.MysqlTexasGameInfo
	(*TexasGameRecord)(nil),          // 4: g1.protocol.TexasGameRecord
	(*TexasGameRecordDetail)(nil),    // 5: g1.protocol.TexasGameRecordDetail
	(*TexasGamePokerDealRecord)(nil), // 6: g1.protocol.TexasGamePokerDealRecord
	(*TexasGamePlayerRecord)(nil),    // 7: g1.protocol.TexasGamePlayerRecord
	(*TexasGameOperateRecord)(nil),   // 8: g1.protocol.TexasGameOperateRecord
	(GameTypeId)(0),                  // 9: g1.protocol.GameTypeId
	(RoomStage)(0),                   // 10: g1.protocol.RoomStage
	(DealType)(0),                    // 11: g1.protocol.DealType
	(CardType)(0),                    // 12: g1.protocol.CardType
	(GameState)(0),                   // 13: g1.protocol.GameState
	(OperateType)(0),                 // 14: g1.protocol.OperateType
}
var file_database_proto_depIdxs = []int32{
	9,  // 0: g1.protocol.MysqlTexasRoomInfo.game_type:type_name -> g1.protocol.GameTypeId
	10, // 1: g1.protocol.MysqlTexasRoomInfo.room_stage:type_name -> g1.protocol.RoomStage
	9,  // 2: g1.protocol.MysqlTexasPlayerInfo.game_type:type_name -> g1.protocol.GameTypeId
	10, // 3: g1.protocol.MysqlTexasPlayerInfo.room_stage:type_name -> g1.protocol.RoomStage
	9,  // 4: g1.protocol.MysqlTexasGameInfo.game_type:type_name -> g1.protocol.GameTypeId
	10, // 5: g1.protocol.MysqlTexasGameInfo.room_stage:type_name -> g1.protocol.RoomStage
	9,  // 6: g1.protocol.TexasGameRecord.game_type:type_name -> g1.protocol.GameTypeId
	10, // 7: g1.protocol.TexasGameRecord.room_stage:type_name -> g1.protocol.RoomStage
	5,  // 8: g1.protocol.TexasGameRecord.detail:type_name -> g1.protocol.TexasGameRecordDetail
	6,  // 9: g1.protocol.TexasGameRecordDetail.deal_list:type_name -> g1.protocol.TexasGamePokerDealRecord
	7,  // 10: g1.protocol.TexasGameRecordDetail.player_list:type_name -> g1.protocol.TexasGamePlayerRecord
	8,  // 11: g1.protocol.TexasGameRecordDetail.operate_list:type_name -> g1.protocol.TexasGameOperateRecord
	11, // 12: g1.protocol.TexasGamePokerDealRecord.deal_type:type_name -> g1.protocol.DealType
	12, // 13: g1.protocol.TexasGamePlayerRecord.card_type:type_name -> g1.protocol.CardType
	13, // 14: g1.protocol.TexasGameOperateRecord.game_state:type_name -> g1.protocol.GameState
	14, // 15: g1.protocol.TexasGameOperateRecord.operate:type_name -> g1.protocol.OperateType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_database_proto_init() }
func file_database_proto_init() {
	if File_database_proto != nil {
		return
	}
	file_game_enum_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_database_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlRoleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlTexasRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlTexasPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MysqlTexasGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGameRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGameRecordDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGamePokerDealRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGamePlayerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_database_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TexasGameOperateRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_database_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_database_proto_goTypes,
		DependencyIndexes: file_database_proto_depIdxs,
		MessageInfos:      file_database_proto_msgTypes,
	}.Build()
	File_database_proto = out.File
	file_database_proto_rawDesc = nil
	file_database_proto_goTypes = nil
	file_database_proto_depIdxs = nil
}
