// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.30.1
// source: error_code.proto

package g1_protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	// 公共错误码，范围：[-99,-1]
	ErrorCode_ERR_SUCESS                          ErrorCode = 0   // 成功 ,新pb版本可能导致缺省nil
	ErrorCode_ERR_OK                              ErrorCode = 200 // 成功,兼容http状态码
	ErrorCode_ERR_FAIL                            ErrorCode = -1
	ErrorCode_ERR_TIMEOUT                         ErrorCode = -2
	ErrorCode_ERR_MARSHAL                         ErrorCode = -3
	ErrorCode_ERR_NOT_EXIST                       ErrorCode = -4
	ErrorCode_ERR_DB                              ErrorCode = -5
	ErrorCode_ERR_CONF                            ErrorCode = -6
	ErrorCode_ERR_ARGV                            ErrorCode = -7
	ErrorCode_ERR_ZONE                            ErrorCode = -8
	ErrorCode_ERR_HAS_EXIST                       ErrorCode = -9
	ErrorCode_ERR_GEN_ID                          ErrorCode = -10
	ErrorCode_ERR_INTERNAL                        ErrorCode = -11
	ErrorCode_ERR_NOT_EXIST_GAME_ROOM             ErrorCode = -12    // 游戏房间不存在
	ErrorCode_ERR_NOT_EXIST_PLAYER                ErrorCode = -13    // 玩家不存在
	ErrorCode_ERR_NOT_EXIST_GAME_LOG              ErrorCode = -14    // 游戏日志不存在
	ErrorCode_ERR_NOT_ENOUGH_GAME_ROOM            ErrorCode = -15    //  游戏房间不足
	ErrorCode_ERR_INSTANCE_NOT_AVAILABLE          ErrorCode = -10001 // 副本未开放
	ErrorCode_ERR_ITEM_NOT_ENOUGH                 ErrorCode = -10002 // 道具数量不足
	ErrorCode_ERR_ITEM_ADD_ERROR                  ErrorCode = -10003 // 添加道具失败
	ErrorCode_ERR_ITEM_CARD_NOT_EXIST             ErrorCode = -10004 // 卡牌不存在
	ErrorCode_ERR_INSTANCE_NOT_PASS               ErrorCode = -10005 // 章节未通关
	ErrorCode_ERR_REWARD_ALREADY_GET              ErrorCode = -10006 // 奖励重复领取
	ErrorCode_ERR_SINEW_NOT_ENOUGH                ErrorCode = -10007 // 体力不足
	ErrorCode_ERR_GOLD_NOT_ENOUGH                 ErrorCode = -10008 // 金币不足
	ErrorCode_ERR_DIAMOND_NOT_ENOUGH              ErrorCode = -10009 // 钻石不足
	ErrorCode_ERR_ACE_COIN_NOT_ENOUGH             ErrorCode = -10010 // ace币不足
	ErrorCode_ERR_ICON_NOT_HAVE                   ErrorCode = -10020 // 头像未获得
	ErrorCode_ERR_FRAME_NOT_HAVE                  ErrorCode = -10021 // 相框未获得
	ErrorCode_ERR_IMAGE_NOT_HAVE                  ErrorCode = -10022 // 立绘未获得
	ErrorCode_ERR_INVALID_NAME                    ErrorCode = -10023 // 名字不合法
	ErrorCode_ERR_SENSITIVE_WORD                  ErrorCode = -10024 // 敏感词
	ErrorCode_ERR_DUPLICATE_NAME                  ErrorCode = -10025 // 名字已经存在
	ErrorCode_ERR_FRIEND_ALREADY_FRIEND           ErrorCode = -10050 // 对方已经是好友
	ErrorCode_ERR_FRIEND_NOT_EXIST                ErrorCode = -10051 // 好友不存在
	ErrorCode_ERR_FRIEND_MAX_INVITATION_NUM       ErrorCode = -10052
	ErrorCode_ERR_FRIEND_OTHER_MAX_INVITATION_NUM ErrorCode = -10053 // 对方好友申请已满
	ErrorCode_ERR_FRIEND_INVITATION_NOT_EXIST     ErrorCode = -10054
	ErrorCode_ERR_FRIEND_MAX_FRIEND_NUM           ErrorCode = -10055 // 好友数量满
	ErrorCode_ERR_FRIEND_OTHER_MAX_FRIEND_NUM     ErrorCode = -10056 // 对方好友数量满
	ErrorCode_ERR_FRIEND_SHIELD                   ErrorCode = -10057 // 玩家被屏蔽
	ErrorCode_ERR_FRIEND_MAX_SHIELD               ErrorCode = -10058 // 黑名单达到上限
	ErrorCode_ERR_MALL_OUT_OF_TIME                ErrorCode = -10130 // 商城商品已过期
	ErrorCode_ERR_MALL_DAILY_LIMIT                ErrorCode = -10131 // 商城商品每日购买限制
	ErrorCode_ERR_MALL_BUY_LIMIT                  ErrorCode = -10132 // 商城商品购买限制
	ErrorCode_ERR_MAIN_TASK_NOT_FINISH            ErrorCode = -10150 // 主线任务未完成
	ErrorCode_ERR_GUIDE_IS_EXIST                  ErrorCode = -10187 // 该引导已经存在
	ErrorCode_ERR_FUNCTION_NOT_OPEN               ErrorCode = -10188 // 功能未开放
	// 德州扑克错误码
	ErrorCode_ERR_TEXAS_FOLD_PARAMETERS         ErrorCode = -20000 // 弃牌参数错误
	ErrorCode_ERR_TEXAS_SEAT_OCCUPIED           ErrorCode = -20001 // 座位已经被占用
	ErrorCode_ERR_TEXAS_PLAYER_NOT_IN_GAME      ErrorCode = -20002 // 玩家不在游戏中
	ErrorCode_ERR_TEXAS_PLAYER_NOT_ACTIVE       ErrorCode = -20003 // 玩家不能操作
	ErrorCode_ERR_TEXAS_PLAYER_STATUS_INCORRECT ErrorCode = -20004 // 玩家状态不正确
	ErrorCode_ERR_TEXAS_PLAYER_IN_GAME          ErrorCode = -20005 // 玩家已经在游戏中
	ErrorCode_ERR_TEXAS_TABLE_FULL              ErrorCode = -20006 // 桌子数量已满
	ErrorCode_ERR_TEXAS_NOT_IN_TABLE            ErrorCode = -20007 // 玩家不在桌子中
	ErrorCode_ERR_TEXAS_STAND_UP_PARAMETERS     ErrorCode = -20008 // 站起参数错误
	ErrorCode_ERR_TEXAS_PLAYER_HAS_STAND_UP     ErrorCode = -20009 // 玩家已经站起
	ErrorCode_ERR_TEXAS_DO_BET_PARAMETERS       ErrorCode = -20010 // 下注参数错误
	ErrorCode_ERR_TEXAS_CHIPS_NOT_ENOUGH        ErrorCode = -20011 // 筹码不足
	ErrorCode_ERR_TEXAS_CALL_CHIPS_NOT_ENOUGH   ErrorCode = -20012 // 跟注筹码不足
	ErrorCode_ERR_TEXAS_RAISE_CHIPS_NOT_ENOUGH  ErrorCode = -20013 // 加注筹码不足
	ErrorCode_ERR_TEXAS_CONFIG_NOT_FOUND        ErrorCode = -20014 // 配置未找到
	ErrorCode_ERR_TEXAS_SEAT_NOT_FOUND          ErrorCode = -20015 // 座位未找到
	// 排行榜
	ErrorCode_ERR_RANK_TYPE_ERROR ErrorCode = -90000 // 排行榜类型错误
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:      "ERR_SUCESS",
		200:    "ERR_OK",
		-1:     "ERR_FAIL",
		-2:     "ERR_TIMEOUT",
		-3:     "ERR_MARSHAL",
		-4:     "ERR_NOT_EXIST",
		-5:     "ERR_DB",
		-6:     "ERR_CONF",
		-7:     "ERR_ARGV",
		-8:     "ERR_ZONE",
		-9:     "ERR_HAS_EXIST",
		-10:    "ERR_GEN_ID",
		-11:    "ERR_INTERNAL",
		-12:    "ERR_NOT_EXIST_GAME_ROOM",
		-13:    "ERR_NOT_EXIST_PLAYER",
		-14:    "ERR_NOT_EXIST_GAME_LOG",
		-15:    "ERR_NOT_ENOUGH_GAME_ROOM",
		-10001: "ERR_INSTANCE_NOT_AVAILABLE",
		-10002: "ERR_ITEM_NOT_ENOUGH",
		-10003: "ERR_ITEM_ADD_ERROR",
		-10004: "ERR_ITEM_CARD_NOT_EXIST",
		-10005: "ERR_INSTANCE_NOT_PASS",
		-10006: "ERR_REWARD_ALREADY_GET",
		-10007: "ERR_SINEW_NOT_ENOUGH",
		-10008: "ERR_GOLD_NOT_ENOUGH",
		-10009: "ERR_DIAMOND_NOT_ENOUGH",
		-10010: "ERR_ACE_COIN_NOT_ENOUGH",
		-10020: "ERR_ICON_NOT_HAVE",
		-10021: "ERR_FRAME_NOT_HAVE",
		-10022: "ERR_IMAGE_NOT_HAVE",
		-10023: "ERR_INVALID_NAME",
		-10024: "ERR_SENSITIVE_WORD",
		-10025: "ERR_DUPLICATE_NAME",
		-10050: "ERR_FRIEND_ALREADY_FRIEND",
		-10051: "ERR_FRIEND_NOT_EXIST",
		-10052: "ERR_FRIEND_MAX_INVITATION_NUM",
		-10053: "ERR_FRIEND_OTHER_MAX_INVITATION_NUM",
		-10054: "ERR_FRIEND_INVITATION_NOT_EXIST",
		-10055: "ERR_FRIEND_MAX_FRIEND_NUM",
		-10056: "ERR_FRIEND_OTHER_MAX_FRIEND_NUM",
		-10057: "ERR_FRIEND_SHIELD",
		-10058: "ERR_FRIEND_MAX_SHIELD",
		-10130: "ERR_MALL_OUT_OF_TIME",
		-10131: "ERR_MALL_DAILY_LIMIT",
		-10132: "ERR_MALL_BUY_LIMIT",
		-10150: "ERR_MAIN_TASK_NOT_FINISH",
		-10187: "ERR_GUIDE_IS_EXIST",
		-10188: "ERR_FUNCTION_NOT_OPEN",
		-20000: "ERR_TEXAS_FOLD_PARAMETERS",
		-20001: "ERR_TEXAS_SEAT_OCCUPIED",
		-20002: "ERR_TEXAS_PLAYER_NOT_IN_GAME",
		-20003: "ERR_TEXAS_PLAYER_NOT_ACTIVE",
		-20004: "ERR_TEXAS_PLAYER_STATUS_INCORRECT",
		-20005: "ERR_TEXAS_PLAYER_IN_GAME",
		-20006: "ERR_TEXAS_TABLE_FULL",
		-20007: "ERR_TEXAS_NOT_IN_TABLE",
		-20008: "ERR_TEXAS_STAND_UP_PARAMETERS",
		-20009: "ERR_TEXAS_PLAYER_HAS_STAND_UP",
		-20010: "ERR_TEXAS_DO_BET_PARAMETERS",
		-20011: "ERR_TEXAS_CHIPS_NOT_ENOUGH",
		-20012: "ERR_TEXAS_CALL_CHIPS_NOT_ENOUGH",
		-20013: "ERR_TEXAS_RAISE_CHIPS_NOT_ENOUGH",
		-20014: "ERR_TEXAS_CONFIG_NOT_FOUND",
		-20015: "ERR_TEXAS_SEAT_NOT_FOUND",
		-90000: "ERR_RANK_TYPE_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERR_SUCESS":                          0,
		"ERR_OK":                              200,
		"ERR_FAIL":                            -1,
		"ERR_TIMEOUT":                         -2,
		"ERR_MARSHAL":                         -3,
		"ERR_NOT_EXIST":                       -4,
		"ERR_DB":                              -5,
		"ERR_CONF":                            -6,
		"ERR_ARGV":                            -7,
		"ERR_ZONE":                            -8,
		"ERR_HAS_EXIST":                       -9,
		"ERR_GEN_ID":                          -10,
		"ERR_INTERNAL":                        -11,
		"ERR_NOT_EXIST_GAME_ROOM":             -12,
		"ERR_NOT_EXIST_PLAYER":                -13,
		"ERR_NOT_EXIST_GAME_LOG":              -14,
		"ERR_NOT_ENOUGH_GAME_ROOM":            -15,
		"ERR_INSTANCE_NOT_AVAILABLE":          -10001,
		"ERR_ITEM_NOT_ENOUGH":                 -10002,
		"ERR_ITEM_ADD_ERROR":                  -10003,
		"ERR_ITEM_CARD_NOT_EXIST":             -10004,
		"ERR_INSTANCE_NOT_PASS":               -10005,
		"ERR_REWARD_ALREADY_GET":              -10006,
		"ERR_SINEW_NOT_ENOUGH":                -10007,
		"ERR_GOLD_NOT_ENOUGH":                 -10008,
		"ERR_DIAMOND_NOT_ENOUGH":              -10009,
		"ERR_ACE_COIN_NOT_ENOUGH":             -10010,
		"ERR_ICON_NOT_HAVE":                   -10020,
		"ERR_FRAME_NOT_HAVE":                  -10021,
		"ERR_IMAGE_NOT_HAVE":                  -10022,
		"ERR_INVALID_NAME":                    -10023,
		"ERR_SENSITIVE_WORD":                  -10024,
		"ERR_DUPLICATE_NAME":                  -10025,
		"ERR_FRIEND_ALREADY_FRIEND":           -10050,
		"ERR_FRIEND_NOT_EXIST":                -10051,
		"ERR_FRIEND_MAX_INVITATION_NUM":       -10052,
		"ERR_FRIEND_OTHER_MAX_INVITATION_NUM": -10053,
		"ERR_FRIEND_INVITATION_NOT_EXIST":     -10054,
		"ERR_FRIEND_MAX_FRIEND_NUM":           -10055,
		"ERR_FRIEND_OTHER_MAX_FRIEND_NUM":     -10056,
		"ERR_FRIEND_SHIELD":                   -10057,
		"ERR_FRIEND_MAX_SHIELD":               -10058,
		"ERR_MALL_OUT_OF_TIME":                -10130,
		"ERR_MALL_DAILY_LIMIT":                -10131,
		"ERR_MALL_BUY_LIMIT":                  -10132,
		"ERR_MAIN_TASK_NOT_FINISH":            -10150,
		"ERR_GUIDE_IS_EXIST":                  -10187,
		"ERR_FUNCTION_NOT_OPEN":               -10188,
		"ERR_TEXAS_FOLD_PARAMETERS":           -20000,
		"ERR_TEXAS_SEAT_OCCUPIED":             -20001,
		"ERR_TEXAS_PLAYER_NOT_IN_GAME":        -20002,
		"ERR_TEXAS_PLAYER_NOT_ACTIVE":         -20003,
		"ERR_TEXAS_PLAYER_STATUS_INCORRECT":   -20004,
		"ERR_TEXAS_PLAYER_IN_GAME":            -20005,
		"ERR_TEXAS_TABLE_FULL":                -20006,
		"ERR_TEXAS_NOT_IN_TABLE":              -20007,
		"ERR_TEXAS_STAND_UP_PARAMETERS":       -20008,
		"ERR_TEXAS_PLAYER_HAS_STAND_UP":       -20009,
		"ERR_TEXAS_DO_BET_PARAMETERS":         -20010,
		"ERR_TEXAS_CHIPS_NOT_ENOUGH":          -20011,
		"ERR_TEXAS_CALL_CHIPS_NOT_ENOUGH":     -20012,
		"ERR_TEXAS_RAISE_CHIPS_NOT_ENOUGH":    -20013,
		"ERR_TEXAS_CONFIG_NOT_FOUND":          -20014,
		"ERR_TEXAS_SEAT_NOT_FOUND":            -20015,
		"ERR_RANK_TYPE_ERROR":                 -90000,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_error_code_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_error_code_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_error_code_proto_rawDescGZIP(), []int{0}
}

var File_error_code_proto protoreflect.FileDescriptor

var file_error_code_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x67, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2a,
	0xfc, 0x11, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x06, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x4b, 0x10, 0xc8, 0x01, 0x12, 0x15, 0x0a, 0x08, 0x45, 0x52,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x18, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x18, 0x0a, 0x0b, 0x45,
	0x52, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x10, 0xfd, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x42, 0x10, 0xfb, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x10, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x15, 0x0a,
	0x08, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x52, 0x47, 0x56, 0x10, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x15, 0x0a, 0x08, 0x45, 0x52, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x10, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x0d, 0x45,
	0x52, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xf7, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x17, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x5f, 0x47,
	0x45, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x19, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x45,
	0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x21, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0xf2,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x45, 0x52, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x27, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xef,
	0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13, 0x45, 0x52, 0x52,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48,
	0x10, 0xee, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x45,
	0x52, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xed, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xec, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0xeb, 0xb1, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x47, 0x45, 0x54,
	0x10, 0xea, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x5f, 0x53, 0x49, 0x4e, 0x45, 0x57, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f,
	0x55, 0x47, 0x48, 0x10, 0xe9, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0xe8, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x23, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0xe7, 0xb1, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48,
	0x10, 0xe6, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45,
	0x10, 0xdc, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x45,
	0x52, 0x52, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56,
	0x45, 0x10, 0xdb, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41,
	0x56, 0x45, 0x10, 0xda, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a,
	0x10, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0xd9, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0xd8, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a,
	0x12, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xd7, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26,
	0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x10, 0xbe, 0xb1, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xbd,
	0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x45, 0x52, 0x52,
	0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0xbc, 0xb1, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x30, 0x0a, 0x23, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x4e,
	0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0xbb, 0xb1, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x5f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xba, 0xb1, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4e,
	0x55, 0x4d, 0x10, 0xb9, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a,
	0x1f, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d,
	0x10, 0xb8, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x45,
	0x52, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0xb7, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x45,
	0x52, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x10, 0xb6, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x21, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xee, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x21, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xed, 0xb0, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41, 0x4c,
	0x4c, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xec, 0xb0, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x10, 0xda, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a,
	0x12, 0x45, 0x52, 0x52, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xb5, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22,
	0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0xb4, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f,
	0x46, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10,
	0xe0, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x45, 0x52,
	0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0xdf, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x29, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0xde, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x45,
	0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xdd, 0xe3, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58,
	0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0xdc, 0xe3, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58,
	0x41, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0xdb, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0xda, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x23, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd9, 0xe3, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xd8, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2a, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x5f, 0x55,
	0x50, 0x10, 0xd7, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b,
	0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x44, 0x4f, 0x5f, 0x42, 0x45, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xd6, 0xe3, 0xfe, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45,
	0x58, 0x41, 0x53, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x4f, 0x55, 0x47, 0x48, 0x10, 0xd5, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x2c, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x48, 0x49, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55,
	0x47, 0x48, 0x10, 0xd4, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a,
	0x20, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x52, 0x41, 0x49, 0x53, 0x45,
	0x5f, 0x43, 0x48, 0x49, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47,
	0x48, 0x10, 0xd3, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xd2, 0xe3, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x45, 0x58,
	0x41, 0x53, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0xd1, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x13,
	0x45, 0x52, 0x52, 0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xf0, 0xc0, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x42, 0x0f,
	0x5a, 0x0d, 0x2e, 0x2f, 0x67, 0x31, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_error_code_proto_rawDescOnce sync.Once
	file_error_code_proto_rawDescData = file_error_code_proto_rawDesc
)

func file_error_code_proto_rawDescGZIP() []byte {
	file_error_code_proto_rawDescOnce.Do(func() {
		file_error_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_error_code_proto_rawDescData)
	})
	return file_error_code_proto_rawDescData
}

var file_error_code_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_error_code_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: g1.protocol.ErrorCode
}
var file_error_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_error_code_proto_init() }
func file_error_code_proto_init() {
	if File_error_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_error_code_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_error_code_proto_goTypes,
		DependencyIndexes: file_error_code_proto_depIdxs,
		EnumInfos:         file_error_code_proto_enumTypes,
	}.Build()
	File_error_code_proto = out.File
	file_error_code_proto_rawDesc = nil
	file_error_code_proto_goTypes = nil
	file_error_code_proto_depIdxs = nil
}
