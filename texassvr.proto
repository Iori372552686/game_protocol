
syntax = "proto3";
package g1.protocol;
option  go_package = "./g1_protocol";
import "room.proto";
/*

// ======================== S -> C ==========================
message S2CGameConfig {
  uint32 game_id = 1;
  string name = 2;
  uint32 is_privated = 3;
  int32 time_limit = 4; // 总时间
  int32 table_size = 5; // 普通场椅子数
  int32 ante = 6;
  int32 sb = 7;
  int32 bb = 8;
  bool is_auth = 9; // 是否授权带入
  uint32 start_bb = 10; // 起始筹码
  bool rebuy = 11; // MTT 是否 rebuy
  bool addon = 12; // MTT 是否 Addon
  uint64 founder_id = 13; // 创建者 id
  bool insurance = 14; // 保险（0：无 1：有）
  uint32 room_type = 15; // 房间类型 (0: normal 1: SNG 2: MTT)
  uint32 blind_lv = 16; // 盲注等级
  uint32 blind_increase_time = 17; // 涨盲剩余时间
  bool ip_limit = 18; // ip 限制
  uint32 straddle = 19;
  uint32 allianceid = 20; // 联盟 id
  repeated uint32 club_ids = 21; // 俱乐部 id
  bool gps_limit = 22;
}


message S2CGameStatu {
  uint32 round_index = 1; // 游戏回合
  uint32 banker_chair = 2;
  uint32 sb_chair = 3;
  uint32 bb_chair = 4;
  uint32 game_statu = 5; // 参考 enum RoomState
  uint32 betting_round = 6; // 下注回合 enum BettingRound
  uint64 total_betted = 7; // 此局游戏总下注
  repeated uint64 side_pots = 8; // 边池信息
  repeated uint32 board_cards = 9; // 公共牌
  S2CDealCard show_cards = 10; // 翻牌（全部 ALLIN 时）
  uint32 is_normal_skip = 11; // 是否异常到达（未走正常流程，所有人 fold）
}

// 结算
message S2CRoundResult {
  message Result {
    uint32 chair_id = 1;
    uint32 win_chip = 2; // 赢取的筹码
    uint32 bet_chip = 3; // 下注的筹码
    repeated uint32 hand_cards = 4; // 手牌
    repeated uint32 best_combination = 5; // 最佳手牌组合
    uint32 hand_type = 6; // 最佳手牌组合牌型
    repeated uint32 side_pots = 7; // 该玩家参与分红的奖池
    uint64 bankrool = 8; // 当前剩余筹码
    uint64 rid = 9; // 玩家 id
  }

  uint32 round_id = 1;
  uint32 end_reason = 2; // 结束理由 0: 正常结束 1: 只剩一名玩家
  repeated uint32 board_cards = 3; // 桌面牌
  repeated Result results = 4; // 结算结果
}

enum OperateType {
  BET = 0; // 下注
  CALL = 1; // 跟注
  RAISE = 2; // 加注
  CHECK = 3; // 看牌
  FOLD = 4; // 弃牌
  BET_BIG_BLIND = 5; // 下大盲
  BET_SMALL_BLIND = 6; // 下小盲
  BET_ANTE = 7; // 下前注

  OPERATE_TYPE_NONE = 10; // 无效操作

  ALLIN_MARK = 0x10000;
  OPERATION_MARK = 0xffff;
}

// 下注结果
message S2CBetResult {
  uint32 round_id = 1;
  uint32 chair_id = 2; // 操作者椅子 id
  uint32 operate_type = 3; // 操作类型 enum OperateType
  uint32 chip = 4; // 下注金额
  uint64 bankroll = 5; // 当前剩余金额
  uint64 total_betted = 6; // 此局游戏总下注
}

message S2CBetBlinds {
  message Card {
    uint32 chair_id = 1;
    repeated uint32 cards = 2;
  }

  repeated S2CBetResult blinds_list = 1;
  repeated Card hands = 2;
  repeated uint32 side_pots = 3; // 边池信息
}

// 回合开始
message S2CStartBet {
  uint32 round_id = 1;
  uint32 chair_id = 2;
  uint32 time_left = 3; // 剩余操作时间(秒)

  // 以下内容当 chair_id 与玩家自己的 chair_id 匹配才会存在
  uint32 call_chip = 4; // 下注金额
  uint32 raise_chip = 5; // 加注起始金额
  uint32 can_check = 6; // 是否能看牌
  uint64 bankrool = 7; // 此玩家当前剩余筹码
  uint32 chip_betted = 8; // 玩家当前轮总下注
  bool can_raise = 9; // 是否可以加注
  uint32 total_think_times = 10; // 房间内累计购买思考时间次数
  uint32 think_times = 11; // 本局游戏购买思考时间次数
  uint64 max_bet = 12; // 当前最大下注额
  uint64 total_betted = 13; // 当前累计下注
  uint64 max_raise_chip = 14; // omaha 此 Bet
所允许的最大加注数(已经减去了已经下注值 chip_betted)
}

message UserInfo {
  uint64 rid = 1; // 玩家 id
  uint32 chair_id = 2; // 座位(无则说明玩家站着)
  string name = 3; // 玩家名字
  uint32 statu = 4; // 玩家状态
  uint32 gender = 5;
  string face_url = 6;
  uint32 vip_level = 7;
  uint32 nationality = 8;

  // 以下数据为此玩家在此局游戏中才会发送
  uint64 round_betted = 9; // 当前轮总下注量
  uint64 total_betted = 10; // 此局游戏总下注量
  uint64 bankrool = 11; // 当前总筹码
  repeated uint32 hand_cards = 12; // 手牌
  uint32 last_operate = 13; // 上次操作类型

  int32 split_id = 14; // 裂变玩家的数字
}

// 更新玩家信息 s -> c
message S2CUpdatePlayerInfo {
  uint32 round_id = 1;
  repeated UserInfo user_list = 2;
  bool full_update = 3; // 更新所有人
}

// 发牌协议 s -> c
message S2CDealCard {
  message CardInfo {
    uint32 chair_id = 1; // 椅子有效值为 [0-8]，不在此范围内的为发放公共牌
    repeated uint32 cards = 2; // 不在有效牌范围内([0-52])的牌为反面牌
  }

  uint32 round_id = 1;
  repeated CardInfo cards = 2;

  // 公共牌数据，保险专用
  message InsuInfo {
    uint32 insured_id = 1; // 命中保险人 id
    string insured_name = 2; // 命中保险人名
    uint32 pot_id = 3; // 命中分池 id
    uint32 insured_val = 4; // 投保额
    uint32 proceeds_val = 5; // 赔付额
    int32 split_id = 14; // 裂变玩家的数字
  }
  repeated InsuInfo insuinfo = 3; // 保险命中状态
}

message S2CSitResult {
  uint32 error_code = 1; // 结果
}

message S2CStandUpResult {
  uint32 chair_id = 1;
  uint64 rid = 2;
  uint64 chips_betted = 3; // 该玩家当前下注回合总下注量
  uint32 error_code = 4; // 结果

  // sng
  uint32 rank = 5; // 排名
}

message S2CLeaveGameResult {
  uint64 rid = 1;
  uint32 error_code = 2;
}

message S2CGameIP {
  uint32 room_id = 1;
  string room_ip = 2;
  uint32 room_type = 3;
  uint32 room_size = 4;
  uint32 club_id = 5;
}

message TopChart {
  message Field {
    uint64 rid = 1; // 玩家 id
    string name = 2; // 玩家名
    string face_url = 3;
    uint64 total_buyin = 4; // 玩家总买入
    uint64 bankrool = 5; // 剩余筹码
    bool online = 6; // 是否 online
    int64 insurance = 7; // 买入保险
    uint32 enter_clubid = 8; // 入口俱乐部 ID
    string enter_clubname = 9; // 入口俱乐部名
    int32 split_id = 14; // 裂变玩家的数字
    int32 settled = 15; // 是否已结算，0 未结算，非 0 已结算
  }
  repeated Field top_chart = 1;
}

// 玩家请求的左边数据面板
message S2CMilitarySuccesses {
  TopChart top_chart = 1;
  uint64 errorcode = 2;
  uint64 rid = 3; // 游戏内不需要
  int64 insurance = 4; // 保险额度
}

message C2SMilitarySuccesses {
  uint64 rid = 1; // 游戏内不需要
}

message S2CGameLog {
  message GameRecord {
    message GamblerRecord {
      uint64 rid = 1;
      uint32 chair_id = 2;
      string name = 3;
      string face_url = 4;
      repeated uint32 hands = 5; // 手牌
      repeated uint32 best_combination = 6; // 最佳牌型
      uint32 hand_type = 7; // 最佳牌型类型
      uint64 chips_betted = 8; // 此回合下注
      uint64 chips_wined = 9; // 赢取的筹码
      uint32 fold_round = 10; // 弃牌回合 ante 0张 preflop 3张 flop 4张 其它5张
      int64 insurance = 11; // 保险获利额
      int32 split_id = 14; // 裂变玩家的数字
    }
    uint32 round_id = 1;
    repeated uint64 flod_list = 2; // 弃牌玩家id列表
    repeated uint32 board = 3; // 公共牌
    repeated GamblerRecord records = 4; // 所有玩家信息
    string record_id = 5; // 录像ID
    uint32 dealer = 6; // 座位id，无效值为无，座位号无人为空庄
    uint32 sb = 7;     // 座位id，无效值为无
    uint32 bb = 8;     // 座位id，无效值为无
  }

  repeated GameRecord records = 1;
}

message S2CBillingData {
  message GameInfo {
    string face_url = 1;
    string nick_name = 2;
    uint32 create_time = 3;
    uint32 game_time = 4; // 牌局时长
    string blind = 5;     // 盲注
    uint32 entry_fee = 6; // 报名费
    uint32 start_score = 7; // 初始积分
    uint32 blind_time = 8; // 涨盲时间
    int32 split_id = 14; // 裂变玩家的数字
  }
  uint32 game_id = 1;
  uint32 round_cnt = 2;
  uint64 max_pot = 3;
  uint64 total_buyin = 4;
  TopChart top_chart = 5;
  int64 insurance = 6; // 保险收入
  GameInfo game_info = 7; // 新增数据
  int32 club_id = 8; // 俱乐部ID，只有俱乐部牌局才有
  int32 begined = 9; // 是否开赛的，非0未开赛
  int32 alliance_id = 10; // 联盟id
}

message S2CTimeLeft {
  uint32 seconds = 1;
}

message S2C_Emoticon {
  uint32 chair_id = 1; // 发表情者座位id
  uint32 emoticon_id = 2; // 表情id
}

message S2C_RemainingChips {
  repeated uint32 chair_id = 1;
  repeated uint64 rids = 2;
  repeated uint32 last_operate = 3;
  repeated uint64 chips = 4;
}

message S2C_BuyinNotify {
  uint32 left_time = 1; // 剩余时间，时间为0则关闭窗口
  uint32 chair_id = 2; // 买入座位
  uint64 rid = 3; // 玩家id
}

message S2C_BuyinResponse {
  uint64 rid = 1;
  uint32 operation = 2; // 0: 主动拒绝 1：主动同意 2：过时 3: 无审核买入成功
  uint32 club_id = 3; //
}

message MilitaryDiagramField {
  message Field {
    uint32 round_id = 1;
    int64 earnings = 2;
  }
  repeated Field field = 1;
}

message S2C_MilitaryDiagram {
  uint32 room_id = 1;
  repeated MilitaryDiagramField data = 2;
}

message S2C_ShowCard {
  uint32 mark = 1; // 0：取消全部 1：展示第一张 2：展示第二张 3：三张全部展示
}

message S2C_ServerConfig {
  uint32 srv_type = 1; // 服务器类型 0：普通 1：测试
}

message S2C_RoleInfo {
  uint64 rid = 1;
  uint32 game_cnt = 2;
  uint32 hand_cnt = 3;
  uint32 VPIP = 4; // 入池率（千分比）
  uint32 VIPIW = 5; // 入池胜率（千分比）
  string last_talk = 6; // 留言url
  uint32 last_talk_secs = 7; // 留言时间
}

message S2C_MarkList {
  message field {
    uint64 rid = 1;
    uint32 mark = 2;
  }
  repeated field mark_list = 1;
}

message S2C_VoiceCall {
  uint64 rid = 1;
  string url = 2;
  uint32 seconds = 3;
  string name = 4;
}

message S2C_Interaction {
  uint64 caster = 1; // 施放者id
  uint64 target = 2; // 目标id
  uint32 item_id = 3;
}

enum GamblerInsuStatu {
  WAITING = 0; // 等待
  BUYING = 1;  // 购买中
  BOUGHT = 2;  // 已购买
}

message S2C_InsuranceNotify {
  message InsuInfo {
    uint32 pool = 1; // 奖池
    uint32 pot_idx = 2; // 0主池
    repeated uint32 outs = 3;
    uint32 putin = 4; // 投入
    uint32 insured_val = 5; // 投保额
    uint32 history = 6; // 历史投保额
    repeated uint32 outs_chosen = 7; // 选中outs
    uint32 statu = 8; // 该分池购买状态
    uint32 multi_winner = 9; //
是否可能出现多个赢家，而出现分池，0不会，非0可能会
  }

  message Entry {
    uint32 pid = 1;
    string name = 2;
    string face_url = 3;
    repeated uint32 hands = 4; // 手牌
    uint32 statu = 5; // 状态 (GamblerInsuStatu)
    uint32 time = 6; // 剩余时间
    repeated InsuInfo info = 7;
    int32 split_id = 14; // 裂变玩家的数字
  }

  repeated uint32 board = 1;
  repeated Entry entries = 2;
}

message S2CGamblerProps {
  uint32 insu_addtm = 1; // 购买保险加时次数
  uint32 insu_addtm_tmp = 2; // 本小局游戏购买次数
}

message S2CInsuranceOperation {
  message InsuInfo {
    uint32 pot_idx = 1; // 池子id
    repeated uint32 outs = 2; // 已选outs
    uint32 insured_val = 3; // 投保额
    uint32 statu = 4; // 状态
  }
  uint32 pid = 1;
  uint32 statu = 2; // GamblerInsuStatu
  uint32 time = 3; // 剩余时间
  repeated InsuInfo info = 4;
}

message S2CBuyInsuThinkTime {
  uint32 pid = 1; // 购买者
  string name = 2; // 购买者姓名
  uint32 error_code = 3; // 错误码 0成功
  uint32 time = 4; // 剩余时间
  uint32 insu_addtm = 5; // 总共购买保险次数
  uint32 insu_addtm_tmp = 6; // 本轮购买次数
  int32 split_id = 14; // 裂变玩家的数字
}

message S2C_InsuranceResult {
  uint32 pid = 1; // 投保者
  uint32 pot_idx = 2; // 池子id
  uint32 error_code = 3; // 错误码(0正常, 1:超过上限, 2:不能拒保, 3:不能投保)
}

message S2C_CtrlInsu {
  repeated uint32 insr = 1;
}

message S2C_GamblerOption {
  bool insurance = 1; // 保险提醒开关
}

message S2C_BlindLevelUp {
  uint32 lvl = 1; // 新等级
  uint32 ante = 2; // 前注
  uint32 sb = 3; // 小盲
  uint32 bb = 4;
  uint32 time_elapsed = 5; // 已进行时间
  uint64 ave_chip = 6; // 均筹
  uint32 bi_time = 7; // 涨盲剩余时间
  uint32 competitor_cnt = 8; // 剩余人口
  uint32 rank = 9; // 目前排名
  uint32 event = 10; // 0: 更新 1： 涨盲提示
}

message S2C_SNGWashout {
  uint32 rank = 1; // 排名
  int64 win_chips = 2; // 奖励
  bool is_final = 3;
}

message S2C_StartCountDown {
  uint32 seconds = 1; // 剩余时间
}

message S2C_SignResult {
  uint32 game_type = 1;
  uint32 error_code = 2;
}

message RoomOwerInfo {
  string FigureUrl = 1;
  int32 Gender = 2;
  string NickName = 3;
  string sign = 4; // 签名
  int32 MaxNoble = 5; // VIP等级
  string WeChat = 6; // 微信帐号
  repeated uint32 clubIds = 7; // 加入的俱乐部id
}

message GamblerInfo {
  uint64 rid = 1;
  string name = 2;
  int32 gender = 3;
  int32 noble = 4;
  string figure_url = 5;
  string sign = 6;
  string we_chat = 7;
  repeated uint32 clubs = 8;
}

message RoomBaseInfo {
  uint32 room_id = 1;
  uint32 left_time = 2; // 报名时间
  uint32 entry_fee = 3; // 报名费
  uint32 service_fee = 4; // 服务费
  uint32 start_bb = 5; // 起始筹码
  uint32 gambler_cnt = 6; // 当前玩家数
  uint32 table_size = 7; // 人口上限
  uint32 ib_time = 8; // 涨盲时间
  bool buyin_auth = 9; // 授权报名
  bool is_private = 10; // 私有？
  bool ip_limit = 11; // ip限制
  GamblerInfo founder = 12; // 创建者信息
  string room_name = 13; // 房间名
}

message S2C_OpenSignPanel {
  uint32 game_type = 1;
  RoomBaseInfo room_info = 2;
}

message NormalRoomInfo {
  uint32 room_id = 1;
  uint32 left_time = 2;
  uint32 ante = 3;
  uint32 sb = 4;
  uint32 bb = 5;
  uint32 table_size = 6;
  uint32 time_limit = 7;
  uint32 is_privated = 8;
  bool is_auth = 9;
  bool straggle = 10;
  bool ip_limit = 11;
  bool insurance = 12;
  string room_name = 13;
  GamblerInfo founder = 14; // 创建者信息
}

message S2C_RoomInfo {
  uint32 game_type = 1;
  uint32 game_statu = 2;
  uint32 enter_id = 3; // 联盟牌局，入口俱乐部id
  RoomBaseInfo sng_info = 4;
  NormalRoomInfo normal_info = 5;
}

message S2C_RoomSet {
  enum OpType {
    NUll = 0;
    INSU = 1;
    BUYIN = 2;
    CLOSE = 3;
    PAUSE = 4;
    TRUSTEESHIP = 5;
  }
  uint32 op_type = 1;
  uint32 error_code = 2; // 0表示成功
  bool statu = 3; // 当前状态
}

message S2C_PauseStatu {
  uint32 seconds = 1; // 剩余时间
}

message S2C_RankMark {
  message mark {
    uint32 chair = 1;
    uint32 rank = 2;
    uint32 pid = 3;
    string face_url = 4;
    string name = 5;
  }
  repeated mark rank_list = 1;
}

message S2CGameInfo {
  message CardSet {
    uint32 pid = 1;
    uint32 chair = 2;
    repeated uint32 cards = 3;
  }

  message BetLog {
    uint32 pid = 1;
    uint32 chair = 2;
    uint32 optype = 3;
    uint32 chip = 4;
  }

  repeated uint32 board = 1;
  repeated CardSet hands = 2;
  S2CStartBet start_bet = 3; // 当前操作信息
  BetLog bet_log = 4; // 操作历史
}

message S2CFavorites {
  repeated uint32 round_id = 1;
  uint32 total_size = 2;
}

message S2CFavoriteResult {
  uint32 round_id = 1;
  uint32 operation = 2; // 0: 添加 1: 删除
  uint32 error_code = 3; // 0成功
}

message S2CDoShowCard {
  uint32 pid = 1; // 玩家id
  uint32 chair_id = 2; // 座位id
  repeated uint32 cards = 3; // 手牌
}

message S2CBuyinResponse {
  uint32 chair = 1;
  uint32 left_time = 2; // 剩余时间，秒
}

// ================= C -> S ==================
message C2S_BetRequest {
  uint64 chip = 1; // 0为看牌
}

message C2S_SitRequest {
  uint32 chair_id = 1;
  double f_lati = 2; // gps纬度
  double f_long = 3; // gps 经度
}

message C2S_BuyIn {
  uint64 buyin = 1; // 买入筹码
  double f_lati = 2; // gps 纬度,for sng,just buy once
  double f_long = 3; // gps 经度
}

message C2S_GetLookersList {
  enum LOOKER_TYPE {
    LOOKER_TYPE_SITTING = 0; // 当前玩家（牌桌中的人）
    LOOKER_TYPE_LOOKERS = 1; // 围观列表
  }
  uint32 looker_type = 1;
}

message C2S_Interaction {
  uint32 item_id = 1; // 物品id
  uint64 pid = 2; // 目标id
}

message C2S_Emoticon {
  uint32 emoticon_id = 1; // 表情id
}

message C2S_ShowCard {
  uint32 mark = 1; // 0：取消全部 1：展示第一张 2：展示第二张 3：三张全部展示
}

message C2S_GetRoleInfo {
  uint64 rid = 1;
}

message C2S_MarkPlayer {
  enum COLORS {
    COLOR_NONE = 0;
    COLOR_GREEN = 2;
    COLOR_YELLOW = 3;
    COLOR_BROWN = 4;
    COLOR_ORANGE = 5;
    COLOR_DARK_BLUE = 6;
    COLOR_BLUE = 7;
    COLOR_LIGHT_BLUE = 8;
    COLOR_MAX = 9;
  }
  uint64 rid = 1;
  uint32 mark = 2;
}

message C2S_VoiceCall {
  string url = 1;
  uint32 seconds = 2;
}

message C2S_InsuranceBuy {
  uint32 pot_idx = 1; // 分池id
  uint32 value = 2; // 购买金额（0标识不买）
  repeated uint32 cards = 3; // 购买的牌值（空为全部）
}

message C2S_InsuranceOp {
  message OP {
    uint32 pot_idx = 1; // 分池id
    repeated uint32 outs = 2; // 选中outs
    uint32 putin = 3; // 投入额
  }
  repeated OP op = 1; // 操作
}

message C2S_RoomSet {
  uint32 insurance = 1; // 保险提醒开启状态
  uint32 insurance_switch = 2; // 房间保险开关（房主使用)
  uint32 buyin_auth = 3; // 授权开(True)关(False)
  uint32 close_room = 4; // 结束牌局
  uint32 pause_game = 5; // 暂停(True)/恢复(False)牌局
  uint32 trusteeship = 6; // 托管
}

message C2SGetGameInfo {
  uint32 board = 1;
  uint32 hands = 2;
  uint32 op = 3; // 当前操作
  uint32 oplog = 4; // 本回合下注历史
  uint32 insurance = 5; // 保险信息
返回S2C_InsuranceNotify，请求此协议后，客户端关闭自己本地的保险面板 uint32
buyin_dlg = 6; //
返回S2C_BuyinNotify，请求此协议后，客户端关闭本地买入面板，等待服务器返回 uint32
game_statu = 7; // S2CGameStatu
}

message C2SAddToFavorite {
  uint32 op = 1; // 0: 添加 1： 删除
  uint32 round_id = 2; // 回合
}

message C2SChangeSkin {
  string table_cloth = 1; // 桌布
  string card_back = 2; // 牌背
  string card_front = 3; // 牌面
}

message C2S_PreOperation {
  int32 type = 1; // 3看牌,4弃牌,1跟注 -1取消预操作 参见:OperateType
  uint32 value = 2; // 跟注的值
}

message S2C_PreOperation {
  int32 type = 1; // 3看牌,4弃牌,1跟注 参见:OperateType
  uint32 value = 2; // 跟注的值
}

message C2S_QueryGameLog {
  uint32 index = 1; // 客户端目前保留至的回合数
}

message S2C_RabbitHunting {
  uint32 error_code = 1; // 错误码，无或0为无错
  uint32 seconds = 2; // 猎兔倒计时
  repeated uint32 cards = 3; // 牌
}

message S2CEarlySettleRes {
  uint32 ret = 1; // 提前结算结果
}

message C2SRoomListReq {
  uint32 dwReqType = 1; // 请求数据类型0:我的牌局 1:普通场 2:sng 3MTT
  uint32 strRoomid = 2; // 查询指定房间id
  uint32 showNum = 3; // 显示数量
  uint32 pageIndex = 4; // 第几页
  uint32 rid = 5; // 请求者rid
  uint32 room_id = 6; // 进程间通信使用，客户端忽略
}



message BuyingPlayerInfo {
  repeated uint32 playerid = 1;
  repeated string NickName = 2;
  repeated uint32 buyingNum = 3; // 买入数
  uint32 room_id = 4;
  repeated uint32 dwSurplusTime = 5; // 买入审批剩余时间(秒)
  repeated uint32 dwEndTime = 6; // 审批结束时间戳
  repeated uint32 club_id = 7; // 买入 入口
  repeated string face_url = 8; // 头像
  repeated int32 split_id = 9; // 裂变玩家的数字
  repeated int32 settled = 10; // 是否已结算，0未结算，非0已结算
}

message S2CRoomList {
  repeated RoomInfo list = 1; // 列表数组
  uint32 errorcode = 2; //
0获取成功,1非法的roomId请求,2房间不存在,3服务端房间数据不存在或已关闭 uint32
showNum = 3; // 实际显示的数量 uint32 starIndex = 4; // 开始索引页数 uint32
totalPage = 5; // 总页数 uint32 rType = 6; // 请求房间类型 1:普通场 2:sng 3MTT
}
*/

message InnerCreateRoomReq
{
    RoomBaseInfo base = 1;
}